(function () {
    'use strict';

    frappe.templates['print_layout'] = '<div class="form-print-wrapper">  <div class="print-toolbar row">   <div class="col-xs-2">    <select class="print-preview-select input-sm form-control"></select></div>   <div class="col-xs-2">    <select class="languages input-sm form-control"     placeholder="{{ __("Language") }}"></select></div>   <div class="col-xs-2">    <div class="checkbox small" style="margin-top: 7px; margin-bottom: 0px;">                 <label>                     <input type="checkbox" class="print-letterhead text-muted" style="margin-top: 1px;"/>                     {%= __("Letter Head") %}</label>             </div>         </div>   <div class="col-xs-6 text-right">                          <div class="btn-group">                 <a class="btn-print-print btn-sm btn btn-default">                     <strong>{%= __("Print") %}</strong></a>        <a class="btn-sm btn btn-default" href="#Form/Print Settings">                     {%= __("Settings...") %}</a>        <a class="btn-print-edit btn-sm btn btn-default">                     {%= __("Customize...") %}</a>        <a class="btn-print-preview btn-sm btn btn-default">                     {%= __("Full Page") %}</a>        <a class="btn-download-pdf btn-sm btn btn-default">                     {%= __("PDF") %}</a>             </div>   </div>  </div>  <div class="print-preview-wrapper">         <div class="print-preview">       <div class="print-format"></div>         </div>     </div> </div> ';

    frappe.templates['users_in_sidebar'] = '{% for (var i=0, l=users.length; i < l; i++) {  var u = users[i]; %}  <span class="avatar avatar-small {{ u.avatar_class || "" }}" title="{{ u.title }}">  {% if (u.icon) { %}   <i class="{{ u.icon }}"></i>  {% } else if(u.image) { %}   <img class="media-object" src="{{ u.image }}" alt="{{ u.fullname }}">  {% } else { %}   <div class="standard-image" style="background-color: {{ u.color }};">{{ u.abbr.substr(0,1) }}</div>  {% } %}  </span> {% } %} ';

    frappe.templates['set_sharing'] = '<div class="padding">      <div class="row">         <div class="col-xs-6"><h6>{%= __("User") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div>     </div>   <div class="row shared-user" data-everyone=1>         <div class="col-xs-6 share-all" style="height: 30px;"><b>{{ __("Everyone") }}</b></div>         <div class="col-xs-2"><input type="checkbox" name="read"             {% if(cint(everyone.read)) { %}checked{% } %} class="edit-share"></div>         <div class="col-xs-2"><input type="checkbox" name="write"             {% if(cint(everyone.write)) { %}checked{% } %} class="edit-share"{% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>         <div class="col-xs-2"><input type="checkbox" name="share"             {% if(cint(everyone.share)) { %}checked{% } %} class="edit-share"></div>  </div>      {% for (var i=0, l=shared.length; i < l; i++) {         var s = shared[i]; %}      {% if(s && !s.everyone) { %}      <div class="row shared-user" data-user="{%= s.user %}" data-name="{%= s.name %}">          <div class="col-xs-6">{%= s.user %}</div>          <div class="col-xs-2"><input type="checkbox" name="read"              {% if(cint(s.read)) { %}checked{% } %} class="edit-share"></div>          <div class="col-xs-2"><input type="checkbox" name="write"              {% if(cint(s.write)) { %}checked{% } %} class="edit-share"{% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>          <div class="col-xs-2"><input type="checkbox" name="share"              {% if(cint(s.share)) { %}checked{% } %} class="edit-share"></div>      </div>      {% } %}     {% } %}      {% if(frappe.model.can_share(null, frm)) { %}     <hr>      <div class="row">         <div class="col-xs-6"><h6>{%= __("Share this document with") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div>     </div>      <div class="row">         <div class="col-xs-6 input-wrapper-add-share"></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-read" name="read"></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-write" name="write" {% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-share" name="share"></div>     </div>     <p>         <button class="btn btn-primary btn-add-share">{{ __("Add") }}</button>     </p>     <div class="row">   <div class="col-xs-6"></div>   <div class="col-xs-6">   <div class="checkbox">    <label><span class="input-area">     <input type="checkbox" class="add-share-notify"      name="notify"></span>     <span class="label-area small">{{ __("Notify by email") }}</span>    </label>   </div>   </div>  </div>  {% endif %} </div>';

    frappe.templates['form_sidebar'] = '<ul class="list-unstyled sidebar-menu user-actions hidden"></ul> <ul class="list-unstyled sidebar-menu sidebar-image-section hidden-xs hidden-sm hide">  <li class="divider"></li>  <li class="sidebar-image-wrapper">   <div class="sidebar-image"></div>   <div class="sidebar-standard-image">    <div class="standard-image"></div>   </div>  </li> </ul> {% if frm.meta.beta %} <div class="sidebar-menu">  <p><label class="label label-warning" title="{{ __("This feature is brand new and still experimental") }}">{{ __("Under Development") }}</label></p>  <p><a class="small" href="https://github.com/frappe/{{ frappe.boot.module_app[frappe.scrub(frm.meta.module)] }}/issues/new"    target="_blank">   {{ __("Click here to post bugs and suggestions") }}</a></p>  </div> {% endif %} <ul class="list-unstyled sidebar-menu sidebar-rating hide">  <li class="divider"></li>  <li style="position: relative;">   <a class="strong badge-hover">    <span>{%= __("Feedback") %}</span>   </a>  </li>  <li class="rating-icons"></li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="divider"></li>  <li style="position: relative;">   <a class="strong sidebar-comments badge-hover">    <span>{%= __("Comments") %}</span>    <span class="badge n-comments">0</span>   </a>  </li>     {% if(frappe.help.has_help(doctype)) { %}     <li><a class="strong help-link" data-doctype="{{ doctype }}">{{ __("Help") }}</a></li>     {% } %} </ul> <ul class="list-unstyled sidebar-menu form-assignments">  <li class="divider"></li>  <li class="h6 assigned-to-label">{%= __("Assigned To") %}</li>  <li><a class="strong add-assignment">{%= __("Assign") %}   <i class="octicon octicon-plus" style="margin-left: 2px;"></i></a></li> </ul> <ul class="list-unstyled sidebar-menu form-attachments">  <li class="divider"></li>  <li class="h6 attachments-label">{%= __("Attachments") %}</li>  <li><a class="strong add-attachment">{%= __("Attach File") %}   <i class="octicon octicon-plus" style="margin-left: 2px;"></i></li></a> </ul> <ul class="list-unstyled sidebar-menu">  <li class="divider"></li>  <li class="h6 tags-label">{%= __("Tags") %}</li>  <li class="form-tags">   <div class="tag-area"></div>   <div class="clearfix"></div>  </li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="divider"></li>  <li class="h6 shared-with-label">{%= __("Shared With") %}</li>  <li class="form-shared"></li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="divider"></li>  <li class="h6 viewers-label">{%= __("Currently Viewing") %}</li>  <li class="form-viewers"></li> </ul> <ul class="list-unstyled sidebar-menu text-muted">  <li class="liked-by-parent">   <span class="liked-by">    <i class="octicon octicon-heart like-action text-extra-muted fa-fw"></i>    <span class="likes-count"></span>   </span>  </li>  <li class="modified-by"></li>  <li class="created-by"></li> </ul> {% if(frappe.get_form_sidebar_extension) { %}     {{ frappe.get_form_sidebar_extension() }} {% } %} <ul class="list-unstyled visible-xs visible-sm">  <li class="divider"></li>  <li class="close-sidebar">Close</li> </ul>';

    frappe.templates['form_dashboard'] = '<div class="form-dashboard-wrapper">  <div class="progress-area hidden form-dashboard-section">  </div>  <div class="form-heatmap hidden form-dashboard-section">   <div id="heatmap-{{ frappe.model.scrub(frm.doctype) }}" class="heatmap"></div>   <div class="text-muted small heatmap-message hidden"></div>  </div>  <div class="form-graph form-dashboard-section hidden"></div>  <div class="form-stats form-dashboard-section hidden">   <div class="row"></div>  </div>  <div class="form-links form-dashboard-section hidden">   <div class="transactions"></div>  </div> </div>';

    frappe.templates['form_document_flow'] = '<div class="document-flow">  {% for dt in doctypes %}  <span class="document-flow-link-wrapper">   <a data-doctype="{{ dt }}"    class="document-flow-link {% if (dt===frm.doctype) { %} strong disabled {% } %} "    style="color: inherit;">    <span class="indicator {% if (dt===frm.doctype) { %} blue {% } else { %} darkgrey {% } %}"></span><br>    <span class="document-flow-link-label">{{ __(dt) }}</span>   </a>  </span>  {% endfor %} </div> ';

    frappe.templates['form_links'] = '<div class="form-documents">  {% for (var i=0; i < transactions.length; i++) { %}   {% if((i % 2)===0) { %}<div class="row">{% } %}   <div class="col-xs-6">    <h6>{{ transactions[i].label }}</h6>    {% for (var j=0; j < transactions[i].items.length; j++) {     var doctype = transactions[i].items[j]; %}    <div class="document-link"     data-doctype="{{ doctype }}">     <a class="badge-link small">{{ __(doctype) }}</a>     <span class="text-muted small count"></span>     <span class="open-notification hidden"      title="{{ __("Open {0}", [__(doctype)])}}"></span>     {% if !internal_links[doctype] %}      <button class="btn btn-new btn-default btn-xs hidden"       data-doctype="{{ doctype }}">        <i class="octicon octicon-plus" style="font-size: 12px;"></i></button>     {% endif %}    </div>    {% } %}   </div>   {% if((i % 2)===1) { %}</div>{% } %}  {% } %}    {% if((i % 2)===0) { %}</div>{% } %} </div> ';

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide('frappe.views.formview');

    frappe.views.FormFactory = class FormFactory extends frappe.views.Factory {
    	make(route) {
    		var me = this,
    			dt = route[1];

    		if(!frappe.views.formview[dt]) {
    			frappe.model.with_doctype(dt, function() {
    				me.page = frappe.container.add_page("Form/" + dt);
    				frappe.views.formview[dt] = me.page;
    				me.page.frm = new _f.Frm(dt, me.page, true);
    				me.show_doc(route);
    			});
    		} else {
    			me.show_doc(route);
    		}


    		if(!this.initialized) {
    			$(document).on("page-change", function() {
    				frappe.ui.form.close_grid_form();
    			});

    			frappe.realtime.on("new_communication", function(data) {
    				frappe.timeline.new_communication(data);
    			});

    			frappe.realtime.on("delete_communication", function(data) {
    				frappe.timeline.delete_communication(data);
    			});

    			frappe.realtime.on('update_communication', function(data) {
    				frappe.timeline.update_communication(data);
    			});

    			frappe.realtime.on("doc_viewers", function(data) {
    				frappe.ui.form.set_viewers(data);
    			});
    		}


    		this.initialized = true;
    	}

    	show_doc(route) {
    		var dt = route[1],
    			dn = route.slice(2).join("/"),
    			me = this;

    		if(frappe.model.new_names[dn]) {
    			dn = frappe.model.new_names[dn];
    			frappe.set_route("Form", dt, dn);
    			return;
    		}

    		frappe.model.with_doc(dt, dn, function(dn, r) {
    			if(r && r['403']) { return; } // not permitted

    			if(!(locals[dt] && locals[dt][dn])) {
    				// doc not found, but starts with New,
    				// make a new doc and set it
    				var new_str = __("New") + " ";
    				if(dn && dn.substr(0, new_str.length)==new_str) {
    					var new_name = frappe.model.make_new_doc_and_get_name(dt, true);
    					if(new_name===dn) {
    						me.load(dt, dn);
    					} else {
    						frappe.set_route("Form", dt, new_name);
    					}
    				} else {
    					frappe.show_not_found(route);
    				}
    				return;
    			}
    			me.load(dt, dn);
    		});
    	}

    	load(dt, dn) {
    		frappe.container.change_to("Form/" + dt);
    		frappe.views.formview[dt].frm.refresh(dn);
    	}
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    /* Form page structure

    	+ this.parent (either FormContainer or Dialog)
    		+ this.wrapper
    			+ this.toolbar
    			+ this.form_wrapper
    					+ this.head
    					+ this.body
    						+ this.layout
    				+ this.sidebar
    			+ this.footer
    */

    /* eslint-disable no-console */

    frappe.provide('_f');
    frappe.provide('frappe.ui.form');

    frappe.ui.form.Controller = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    	}
    });

    _f.frms = {};

    _f.Frm = function(doctype, parent, in_form) {
    	this.docname = '';
    	this.doctype = doctype;
    	this.hidden = false;
    	this.refresh_if_stale_for = 120;

    	var me = this;
    	this.opendocs = {};
    	this.custom_buttons = {};
    	this.sections = [];
    	this.grids = [];
    	this.cscript = new frappe.ui.form.Controller({frm:this});
    	this.events = {};
    	this.pformat = {};
    	this.fetch_dict = {};
    	this.parent = parent;
    	this.tinymce_id_list = [];

    	this.setup_meta(doctype);

    	// show in form instead of in dialog, when called using url (router.js)
    	this.in_form = in_form ? true : false;

    	// notify on rename
    	$(document).on('rename', function(event, dt, old_name, new_name) {
    		if(dt==me.doctype)
    			{ me.rename_notify(dt, old_name, new_name); }
    	});
    };

    _f.Frm.prototype.check_doctype_conflict = function(docname) {
    	if(this.doctype=='DocType' && docname=='DocType') {
    		frappe.msgprint(__('Allowing DocType, DocType. Be careful!'));
    	} else if(this.doctype=='DocType') {
    		if (frappe.views.formview[docname] || frappe.pages['List/'+docname]) {
    			window.location.reload();
    			//	frappe.msgprint(__("Cannot open {0} when its instance is open", ['DocType']))
    			// throw 'doctype open conflict'
    		}
    	} else {
    		if (frappe.views.formview.DocType && frappe.views.formview.DocType.frm.opendocs[this.doctype]) {
    			window.location.reload();
    			//	frappe.msgprint(__("Cannot open instance when its {0} is open", ['DocType']))
    			// throw 'doctype open conflict'
    		}
    	}
    };

    _f.Frm.prototype.setup = function() {
    	this.fields = [];
    	this.fields_dict = {};
    	this.state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);

    	// wrapper
    	this.wrapper = this.parent;
    	this.$wrapper = $(this.wrapper);
    	frappe.ui.make_app_page({
    		parent: this.wrapper,
    		single_column: this.meta.hide_toolbar
    	});
    	this.page = this.wrapper.page;
    	this.layout_main = this.page.main.get(0);

    	this.toolbar = new frappe.ui.form.Toolbar({
    		frm: this,
    		page: this.page
    	});

    	// print layout
    	this.setup_print_layout();

    	// 2 column layout
    	this.setup_std_layout();

    	// client script must be called after "setup" - there are no fields_dict attached to the frm otherwise
    	this.script_manager = new frappe.ui.form.ScriptManager({
    		frm: this
    	});
    	this.script_manager.setup();
    	this.watch_model_updates();

    	if(!this.meta.hide_toolbar) {
    		this.footer = new frappe.ui.form.Footer({
    			frm: this,
    			parent: $('<div>').appendTo(this.page.main.parent())
    		});
    		$("body").attr("data-sidebar", 1);
    	}
    	this.setup_drag_drop();

    	this.setup_done = true;
    };

    _f.Frm.prototype.setup_drag_drop = function() {
    	var me = this;
    	this.$wrapper.on('dragenter dragover', false)
    		.on('drop', function(e) {
    			var dataTransfer = e.originalEvent.dataTransfer;
    			if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
    				return;
    			}

    			e.stopPropagation();
    			e.preventDefault();

    			if(me.doc.__islocal) {
    				frappe.msgprint(__("Please save before attaching."));
    				throw "attach error";
    			}

    			if(me.attachments.max_reached()) {
    				frappe.msgprint(__("Maximum Attachment Limit for this record reached."));
    				throw "attach error";
    			}

    			frappe.upload.make({
    				args: me.attachments.get_args(),
    				files: dataTransfer.files,
    				callback: function(attachment, r) {
    					me.attachments.attachment_uploaded(attachment, r);
    				}
    			});
    		});
    };

    _f.Frm.prototype.setup_print_layout = function() {
    	var me = this;
    	this.print_preview = new frappe.ui.form.PrintPreview({
    		frm: this
    	});

    	// show edit button for print view
    	this.page.wrapper.on('view-change', function() {
    		me.toolbar.set_primary_action();
    	});
    };

    _f.Frm.prototype.print_doc = function() {
    	if(this.print_preview.wrapper.is(":visible")) {
    		this.hide_print();
    		return;
    	}
    	if(!frappe.model.can_print(this.doc.doctype, this)) {
    		frappe.msgprint(__("You are not allowed to print this document"));
    		return;
    	}

    	this.print_preview.refresh_print_options().trigger("change");
    	this.page.set_view("print");
    	this.print_preview.set_user_lang();
    	this.print_preview.set_default_print_language();
    	this.print_preview.preview();
    };

    _f.Frm.prototype.hide_print = function() {
    	if(this.setup_done && this.page.current_view_name==="print") {
    		this.page.set_view(this.page.previous_view_name==="print" ?
    			"main" : (this.page.previous_view_name || "main"));
    	}
    };

    _f.Frm.prototype.watch_model_updates = function() {
    	// watch model updates
    	var me = this;

    	// on main doc
    	frappe.model.on(me.doctype, "*", function(fieldname, value, doc) {
    		// set input
    		if(doc.name===me.docname) {
    			if ((value==='' || value===null) && !doc[fieldname]) ; else {
    				me.dirty();
    			}
    			me.fields_dict[fieldname]
    				&& me.fields_dict[fieldname].refresh(fieldname);

    			me.layout.refresh_dependency();
    			var object = me.script_manager.trigger(fieldname, doc.doctype, doc.name);
    			return object;
    		}
    	});

    	// on table fields
    	var table_fields = frappe.get_children("DocType", me.doctype, "fields", {fieldtype:"Table"});

    	// using $.each to preserve df via closure
    	$.each(table_fields, function(i, df) {
    		frappe.model.on(df.options, "*", function(fieldname, value, doc) {
    			if(doc.parent===me.docname && doc.parentfield===df.fieldname) {
    				me.dirty();
    				me.fields_dict[df.fieldname].grid.set_value(fieldname, value, doc);
    				me.script_manager.trigger(fieldname, doc.doctype, doc.name);
    			}
    		});
    	});
    };

    _f.Frm.prototype.setup_std_layout = function() {
    	this.form_wrapper 	= $('<div></div>').appendTo(this.layout_main);
    	this.body 			= $('<div></div>').appendTo(this.form_wrapper);

    	// only tray
    	this.meta.section_style='Simple'; // always simple!

    	// layout
    	this.layout = new frappe.ui.form.Layout({
    		parent: this.body,
    		doctype: this.doctype,
    		frm: this,
    		with_dashboard: true
    	});
    	this.layout.make();

    	this.fields_dict = this.layout.fields_dict;
    	this.fields = this.layout.fields_list;

    	this.document_flow = new frappe.ui.form.DocumentFlow({
    		frm: this
    	});

    	this.dashboard = new frappe.ui.form.Dashboard({
    		frm: this,
    	});

    	// state
    	this.states = new frappe.ui.form.States({
    		frm: this
    	});
    };

    // email the form
    _f.Frm.prototype.email_doc = function(message) {
    	new frappe.views.CommunicationComposer({
    		doc: this.doc,
    		frm: this,
    		subject: __(this.meta.name) + ': ' + this.docname,
    		recipients: this.doc.email || this.doc.email_id || this.doc.contact_email,
    		attach_document_print: true,
    		message: message,
    		real_name: this.doc.real_name || this.doc.contact_display || this.doc.contact_name
    	});
    };

    // rename the form
    _f.Frm.prototype.rename_doc = function() {
    	frappe.model.rename_doc(this.doctype, this.docname);
    };

    _f.Frm.prototype.share_doc = function() {
    	this.shared.show();
    };

    // notify this form of renamed records
    _f.Frm.prototype.rename_notify = function(dt, old, name) {
    	// from form
    	if(this.meta.istable)
    		{ return; }

    	if(this.docname == old)
    		{ this.docname = name; }
    	else
    		{ return; }

    	// cleanup
    	if(this && this.opendocs[old] && frappe.meta.docfield_copy[dt]) {
    		// delete docfield copy
    		frappe.meta.docfield_copy[dt][name] = frappe.meta.docfield_copy[dt][old];
    		delete frappe.meta.docfield_copy[dt][old];
    	}

    	delete this.opendocs[old];
    	this.opendocs[name] = true;

    	if(this.meta.in_dialog || !this.in_form) {
    		return;
    	}

    	frappe.re_route[window.location.hash] = '#Form/' + encodeURIComponent(this.doctype) + '/' + encodeURIComponent(name);
    	frappe.set_route('Form', this.doctype, name);
    };

    // SETUP

    _f.Frm.prototype.setup_meta = function() {
    	this.meta = frappe.get_doc('DocType', this.doctype);
    	this.perm = frappe.perm.get_perm(this.doctype); // for create
    	if(this.meta.istable) {
    		this.meta.in_dialog = 1;
    	}
    };

    _f.Frm.prototype.refresh_header = function(is_a_different_doc) {
    	// set title
    	// main title
    	if(!this.meta.in_dialog || this.in_form) {
    		frappe.utils.set_title(this.meta.issingle ? this.doctype : this.docname);
    	}

    	// show / hide buttons
    	if(this.toolbar) {
    		if (is_a_different_doc) {
    			this.toolbar.current_status = undefined;
    		}

    		this.toolbar.refresh();
    	}

    	this.document_flow.refresh();
    	this.dashboard.refresh();

    	if(this.meta.is_submittable &&
    		this.perm[0] && this.perm[0].submit &&
    		!this.is_dirty() &&
    		!this.is_new() &&
    		this.doc.docstatus===0) {
    		this.dashboard.add_comment(__('Submit this document to confirm'), 'orange', true);
    	}

    	this.clear_custom_buttons();

    	this.show_web_link();
    };

    _f.Frm.prototype.show_web_link = function() {
    	var doc = this.doc, me = this;
    	if(!doc.__islocal && doc.__onload && doc.__onload.is_website_generator) {
    		me.web_link && me.web_link.remove();
    		if(doc.__onload.published) {
    			me.add_web_link("/" + doc.route);
    		}
    	}
    };

    _f.Frm.prototype.add_web_link = function(path, label) {
    	label = label || "See on Website";
    	this.web_link = this.sidebar.add_user_action(__(label),
    		function() {}).attr("href", path || this.doc.route).attr("target", "_blank");
    };

    _f.Frm.prototype.check_doc_perm = function() {
    	// get perm
    	var dt = this.parent_doctype?this.parent_doctype : this.doctype;
    	this.perm = frappe.perm.get_perm(dt, this.doc);

    	if(!this.perm[0].read) {
    		return 0;
    	}
    	return 1;
    };

    _f.Frm.prototype.refresh = function(docname) {
    	var is_a_different_doc = docname ? true : false;

    	if(docname) {
    		// record switch
    		if(this.docname != docname && (!this.meta.in_dialog || this.in_form) && !this.meta.istable) {
    			frappe.utils.scroll_to(0);
    			this.hide_print();
    		}
    		// reset visible columns, since column headings can change in different docs
    		this.grids.forEach(function (grid_obj) { return grid_obj.grid.visible_columns = null; });
    		frappe.ui.form.close_grid_form();
    		this.docname = docname;
    	}

    	cur_frm = this;

    	if(this.docname) { // document to show

    		// set the doc
    		this.doc = frappe.get_doc(this.doctype, this.docname);

    		// check permissions
    		if(!this.check_doc_perm()) {
    			frappe.show_not_permitted(__(this.doctype) + " " + __(this.docname));
    			return;
    		}

    		// read only (workflow)
    		this.read_only = frappe.workflow.is_read_only(this.doctype, this.docname);
    		if (this.read_only) { this.set_read_only(true); }

    		// check if doctype is already open
    		if (!this.opendocs[this.docname]) {
    			this.check_doctype_conflict(this.docname);
    		} else {
    			if(this.doc && (!this.doc.__unsaved) && this.doc.__last_sync_on &&
    				(new Date() - this.doc.__last_sync_on) > (this.refresh_if_stale_for * 1000)) {
    				this.reload_doc();
    				return;
    			}
    		}

    		// do setup
    		if(!this.setup_done) {
    			this.setup();
    		}

    		// load the record for the first time, if not loaded (call 'onload')
    		this.cscript.is_onload = false;
    		if(!this.opendocs[this.docname]) {
    			var me = this;
    			this.cscript.is_onload = true;
    			this.setnewdoc();
    			$(document).trigger("form-load", [this]);
    			$(this.page.wrapper).on('hide',  function() {
    				$(document).trigger("form-unload", [me]);
    			});
    		} else {
    			this.render_form(is_a_different_doc);
    			if (this.doc.localname) {
    				// trigger form-rename and remove .localname
    				delete this.doc.localname;
    				$(document).trigger("form-rename", [this]);
    			}
    		}

    		// if print format is shown, refresh the format
    		if(this.print_preview.wrapper.is(":visible")) {
    			this.print_preview.preview();
    		}

    		if(is_a_different_doc) {
    			if(this.show_print_first && this.doc.docstatus===1) {
    				// show print view
    				this.print_doc();
    			}
    		}

    		// set status classes
    		this.$wrapper.removeClass('validated-form')
    			.toggleClass('editable-form', this.doc.docstatus===0)
    			.toggleClass('submitted-form', this.doc.docstatus===1)
    			.toggleClass('cancelled-form', this.doc.docstatus===2);

    		this.show_if_needs_refresh();
    	}
    };

    _f.Frm.prototype.show_if_needs_refresh = function() {
    	if(this.doc.__needs_refresh) {
    		if(this.doc.__unsaved) {
    			this.dashboard.clear_headline();
    			this.dashboard.set_headline_alert(__("This form has been modified after you have loaded it")
    				+ '<a class="btn btn-xs btn-primary pull-right" onclick="cur_frm.reload_doc()">'
    				+ __("Refresh") + '</a>', "alert-warning");
    		} else {
    			this.reload_doc();
    		}
    	}
    };

    _f.Frm.prototype.render_form = function(is_a_different_doc) {
    	var this$1 = this;

    	if(!this.meta.istable) {
    		this.layout.doc = this.doc;
    		this.layout.attach_doc_and_docfields();

    		this.sidebar = new frappe.ui.form.Sidebar({
    			frm: this,
    			page: this.page
    		});
    		this.sidebar.make();

    		// clear layout message
    		this.layout.show_message();

    		frappe.run_serially([
    			// header must be refreshed before client methods
    			// because add_custom_button
    			function () { return this$1.refresh_header(is_a_different_doc); },
    			// trigger global trigger
    			// to use this
    			function () { return $(document).trigger('form-refresh', [this$1]); },
    			// fields
    			function () { return this$1.refresh_fields(); },
    			// call trigger
    			function () { return this$1.script_manager.trigger("refresh"); },
    			// call onload post render for callbacks to be fired
    			function () {
    				if(this$1.cscript.is_onload) {
    					return this$1.script_manager.trigger("onload_post_render");
    				}
    			},
    			function () { return this$1.dashboard.after_refresh(); }
    		]);
    		// focus on first input

    		if(this.is_new()) {
    			var first = this.form_wrapper.find('.form-layout input:first');
    			if(!in_list(["Date", "Datetime"], first.attr("data-fieldtype"))) {
    				first.focus();
    			}
    		}
    	} else {
    		this.refresh_header(is_a_different_doc);
    	}

    	this.$wrapper.trigger('render_complete');

    	if(!this.hidden) {
    		this.layout.show_empty_form_message();
    	}

    	this.scroll_to_element();
    };

    _f.Frm.prototype.refresh_field = function(fname) {
    	if(this.fields_dict[fname] && this.fields_dict[fname].refresh) {
    		this.fields_dict[fname].refresh();
    		this.layout.refresh_dependency();
    	}
    };

    _f.Frm.prototype.refresh_fields = function() {
    	this.layout.refresh(this.doc);
    	this.layout.primary_button = this.$wrapper.find(".btn-primary");

    	// cleanup activities after refresh
    	this.cleanup_refresh(this);
    };


    _f.Frm.prototype.cleanup_refresh = function() {
    	var me = this;
    	if(me.fields_dict['amended_from']) {
    		if (me.doc.amended_from) {
    			unhide_field('amended_from');
    			if (me.fields_dict['amendment_date']) { unhide_field('amendment_date'); }
    		} else {
    			hide_field('amended_from');
    			if (me.fields_dict['amendment_date']) { hide_field('amendment_date'); }
    		}
    	}

    	if(me.fields_dict['trash_reason']) {
    		if(me.doc.trash_reason && me.doc.docstatus == 2) {
    			unhide_field('trash_reason');
    		} else {
    			hide_field('trash_reason');
    		}
    	}

    	if(me.meta.autoname && me.meta.autoname.substr(0,6)=='field:' && !me.doc.__islocal) {
    		var fn = me.meta.autoname.substr(6);

    		if (me.doc[fn]) {
    			me.toggle_display(fn, false);
    		}
    	}

    	if(me.meta.autoname=="naming_series:" && !me.doc.__islocal) {
    		me.toggle_display("naming_series", false);
    	}
    };

    _f.Frm.prototype.setnewdoc = function() {
    	// moved this call to refresh function
    	// this.check_doctype_conflict(docname);
    	var me = this;

    	// hide any open grid
    	this.script_manager.trigger("before_load", this.doctype, this.docname)
    		.then(function () {
    			me.script_manager.trigger("onload");
    			me.opendocs[me.docname] = true;
    			me.render_form();

    			frappe.after_ajax(function() {
    				me.trigger_link_fields();
    			});

    			frappe.breadcrumbs.add(me.meta.module, me.doctype);
    		});

    	// update seen
    	if(this.meta.track_seen) {
    		$('.list-id[data-name="'+ me.docname +'"]').addClass('seen');
    	}
    };

    _f.Frm.prototype.trigger_link_fields = function() {
    	// trigger link fields which have default values set
    	if (this.is_new() && this.doc.__run_link_triggers) {
    		$.each(this.fields_dict, function(fieldname, field) {
    			if (field.df.fieldtype=="Link" && this.doc[fieldname]) {
    				// triggers add fetch, sets value in model and runs triggers
    				field.set_value(this.doc[fieldname]);
    			}
    		});

    		delete this.doc.__run_link_triggers;
    	}
    };

    _f.Frm.prototype.runscript = function(scriptname, callingfield, onrefresh) {
    	var me = this;
    	if(this.docname) {
    		// send to run
    		if(callingfield)
    			{ $(callingfield.input).set_working(); }

    		frappe.call({
    			method: "runserverobj",
    			args: {'docs':this.doc, 'method':scriptname },
    			btn: callingfield.$input,
    			callback: function(r) {
    				if(!r.exc) {
    					if(onrefresh) {
    						onrefresh(r);
    					}

    					me.refresh_fields();
    				}
    			}
    		});
    	}
    };

    _f.Frm.prototype.copy_doc = function(onload, from_amend) {
    	this.validate_form_action("Create");
    	var newdoc = frappe.model.copy_doc(this.doc, from_amend);

    	newdoc.idx = null;
    	newdoc.__run_link_triggers = false;
    	if(onload) {
    		onload(newdoc);
    	}
    	frappe.set_route('Form', newdoc.doctype, newdoc.name);
    };

    _f.Frm.prototype.reload_doc = function() {
    	this.check_doctype_conflict(this.docname);

    	var me = this;

    	if(!me.doc.__islocal) {
    		frappe.model.remove_from_locals(me.doctype, me.docname);
    		frappe.model.with_doc(me.doctype, me.docname, function() {
    			me.refresh();
    		});
    	}
    };

    frappe.validated = 0;
    // Proxy for frappe.validated
    Object.defineProperty(window, 'validated', {
    	get: function() {
    		console.warn('Please use `frappe.validated` instead of `validated`. It will be deprecated soon.');
    		return frappe.validated;
    	},
    	set: function(value) {
    		console.warn('Please use `frappe.validated` instead of `validated`. It will be deprecated soon.');
    		frappe.validated = value;
    		return frappe.validated;
    	}
    });

    _f.Frm.prototype.save = function(save_action, callback, btn, on_error) {
    	var me = this;
    	return new Promise(function (resolve, reject) {
    		btn && $(btn).prop("disabled", true);
    		$(document.activeElement).blur();

    		frappe.ui.form.close_grid_form();
    		// let any pending js process finish
    		setTimeout(function() {
    			me._save(save_action, callback, btn, on_error, resolve, reject);
    		}, 100);
    	}).then(function () {
    		me.show_success_action();
    	}).catch(function (e) {
    		console.error(e);
    	});
    };

    _f.Frm.prototype._save = function(save_action, callback, btn, on_error, resolve, reject) {
    	var this$1 = this;

    	var me = this;
    	if(!save_action) { save_action = "Save"; }
    	this.validate_form_action(save_action, resolve);

    	if((!this.meta.in_dialog || this.in_form) && !this.meta.istable) {
    		frappe.utils.scroll_to(0);
    	}
    	var after_save = function(r) {
    		if(!r.exc) {
    			if (["Save", "Update", "Amend"].indexOf(save_action)!==-1) {
    				frappe.utils.play_sound("click");
    			}

    			me.script_manager.trigger("after_save");
    			me.refresh();
    		} else {
    			if(on_error) {
    				on_error();
    				reject();
    			}
    		}
    		callback && callback(r);
    		resolve();
    	};

    	var fail = function () {
    		btn && $(btn).prop("disabled", false);
    		if(on_error) {
    			on_error();
    			reject();
    		}
    	};

    	if(save_action != "Update") {
    		// validate
    		frappe.validated = true;
    		frappe.run_serially([
    			function () { return this$1.script_manager.trigger("validate"); },
    			function () { return this$1.script_manager.trigger("before_save"); },
    			function () {
    				if(!frappe.validated) {
    					fail();
    					return;
    				}

    				frappe.ui.form.save(me, save_action, after_save, btn);
    			}
    		]).catch(fail);
    	} else {
    		frappe.ui.form.save(me, save_action, after_save, btn);
    	}
    };


    _f.Frm.prototype.savesubmit = function(btn, callback, on_error) {
    	var this$1 = this;

    	var me = this;

    	var handle_fail = function () {
    		$(btn).prop('disabled', false);
    		if (on_error) {
    			on_error();
    		}
    	};

    	return new Promise(function (resolve) {
    		this$1.validate_form_action("Submit");
    		frappe.confirm(__("Permanently Submit {0}?", [this$1.docname]), function() {
    			frappe.validated = true;
    			me.script_manager.trigger("before_submit").then(function() {
    				if(!frappe.validated) {
    					handle_fail();
    					return;
    				}

    				me.save('Submit', function(r) {
    					if(r.exc) {
    						handle_fail();
    					} else {
    						frappe.utils.play_sound("submit");
    						callback && callback();
    						me.script_manager.trigger("on_submit")
    							.then(function () { return resolve(me); });
    					}
    				}, btn, function () { return handle_fail(); }, resolve);
    			});
    		}, function () { return handle_fail(); } );
    	});
    };

    _f.Frm.prototype.savecancel = function(btn, callback, on_error) {
    	var me = this;

    	var handle_fail = function () {
    		$(btn).prop('disabled', false);
    		if (on_error) {
    			on_error();
    		}
    	};

    	this.validate_form_action('Cancel');
    	frappe.confirm(__("Permanently Cancel {0}?", [this.docname]), function() {
    		frappe.validated = true;
    		me.script_manager.trigger("before_cancel").then(function() {
    			if(!frappe.validated) {
    				handle_fail();
    				return;
    			}

    			var after_cancel = function(r) {
    				if(r.exc) {
    					handle_fail();
    				} else {
    					frappe.utils.play_sound("cancel");
    					me.refresh();
    					callback && callback();
    					me.script_manager.trigger("after_cancel");
    				}
    			};
    			frappe.ui.form.save(me, "cancel", after_cancel, btn);
    		});
    	}, function () { return handle_fail(); });
    };

    // delete the record
    _f.Frm.prototype.savetrash = function() {
    	this.validate_form_action("Delete");
    	frappe.model.delete_doc(this.doctype, this.docname, function() {
    		window.history.back();
    	});
    };

    _f.Frm.prototype.amend_doc = function() {
    	if(!this.fields_dict['amended_from']) {
    		alert('"amended_from" field must be present to do an amendment.');
    		return;
    	}
    	this.validate_form_action("Amend");
    	var me = this;
    	var fn = function(newdoc) {
    		newdoc.amended_from = me.docname;
    		if(me.fields_dict && me.fields_dict['amendment_date'])
    			{ newdoc.amendment_date = frappe.datetime.obj_to_str(new Date()); }
    	};
    	this.copy_doc(fn, 1);
    	frappe.utils.play_sound("click");
    };

    _f.Frm.prototype.disable_save = function() {
    	// IMPORTANT: this function should be called in refresh event
    	this.save_disabled = true;
    	this.toolbar.current_status = null;
    	this.page.clear_primary_action();
    };

    _f.Frm.prototype.enable_save = function() {
    	this.save_disabled = false;
    	this.toolbar.set_primary_action();
    };

    _f.Frm.prototype.save_or_update = function() {
    	if(this.save_disabled) { return; }

    	if(this.doc.docstatus===0) {
    		this.save();
    	} else if(this.doc.docstatus===1 && this.doc.__unsaved) {
    		this.save("Update");
    	}
    };

    _f.Frm.prototype.dirty = function() {
    	this.doc.__unsaved = 1;
    	this.$wrapper.trigger('dirty');
    };

    _f.Frm.prototype.get_docinfo = function() {
    	return frappe.model.docinfo[this.doctype][this.docname];
    };

    _f.Frm.prototype.is_dirty = function() {
    	return this.doc.__unsaved;
    };

    _f.Frm.prototype.is_new = function() {
    	return this.doc.__islocal;
    };


    _f.Frm.prototype.reload_docinfo = function(callback) {
    	var me = this;
    	frappe.call({
    		method: "frappe.desk.form.load.get_docinfo",
    		args: {
    			doctype: me.doctype,
    			name: me.doc.name
    		},
    		callback: function(r) {
    			// docinfo will be synced
    			if(callback) { callback(r.docinfo); }
    			me.timeline.refresh();
    			me.assign_to.refresh();
    			me.attachments.refresh();
    		}
    	});
    };


    _f.Frm.prototype.get_perm = function(permlevel, access_type) {
    	return this.perm[permlevel] ? this.perm[permlevel][access_type] : null;
    };


    _f.Frm.prototype.set_intro = function(txt) {
    	this.dashboard.set_headline_alert(txt);
    };

    _f.Frm.prototype.set_footnote = function(txt) {
    	this.footnote_area = frappe.utils.set_footnote(this.footnote_area, this.body, txt);
    };


    _f.Frm.prototype.add_custom_button = function(label, fn, group) {
    	// temp! old parameter used to be icon
    	if(group && group.indexOf("fa fa-")!==-1) { group = null; }
    	var btn = this.page.add_inner_button(label, fn, group);
    	if(btn) {
    		this.custom_buttons[label] = btn;
    	}
    	return btn;
    };

    //Remove all custom buttons
    _f.Frm.prototype.clear_custom_buttons = function() {
    	this.page.clear_inner_toolbar();
    	this.page.clear_user_actions();
    	this.custom_buttons = {};
    };

    //Remove specific custom button by button Label
    _f.Frm.prototype.remove_custom_button = function(label, group) {
    	this.page.remove_inner_button(label, group);
    };

    _f.Frm.prototype.add_fetch = function(link_field, src_field, tar_field) {
    	if(!this.fetch_dict[link_field]) {
    		this.fetch_dict[link_field] = {'columns':[], 'fields':[]};
    	}
    	this.fetch_dict[link_field].columns.push(src_field);
    	this.fetch_dict[link_field].fields.push(tar_field);
    };

    _f.Frm.prototype.set_print_heading = function(txt) {
    	this.pformat[this.docname] = txt;
    };

    _f.Frm.prototype.action_perm_type_map = {
    	"Create": "create",
    	"Save": "write",
    	"Submit": "submit",
    	"Update": "submit",
    	"Cancel": "cancel",
    	"Amend": "amend",
    	"Delete": "delete"
    };

    _f.Frm.prototype.validate_form_action = function(action, resolve) {
    	var perm_to_check = this.action_perm_type_map[action];
    	var allowed_for_workflow = false;
    	var perms = frappe.perm.get_perm(this.doc.doctype)[0];

    	// Allow submit, write, cancel and create permissions for read only documents that are assigned by
    	// workflows if the user already have those permissions. This is to allow for users to
    	// continue through the workflow states and to allow execution of functions like Duplicate.
    	if ((frappe.workflow.is_read_only(this.doctype, this.docname) && (perms["write"] ||
    		perms["create"] || perms["submit"] || perms["cancel"])) || !frappe.workflow.is_read_only(this.doctype, this.docname)) {
    		allowed_for_workflow = true;
    	}

    	if (!this.perm[0][perm_to_check] && !allowed_for_workflow) {
    		if(resolve) {
    			// re-enable buttons
    			resolve();
    		}
    		frappe.throw (__("No permission to '{0}' {1}", [__(action), __(this.doc.doctype)]));
    	}
    };

    _f.Frm.prototype.has_perm = function(ptype) {
    	return frappe.perm.has_perm(this.doctype, 0, ptype, this.doc);
    };

    _f.Frm.prototype.scroll_to_element = function() {
    	if (frappe.route_options && frappe.route_options.scroll_to) {
    		var scroll_to = frappe.route_options.scroll_to;
    		delete frappe.route_options.scroll_to;

    		var selector = [];
    		for (var key in scroll_to) {
    			var value = scroll_to[key];
    			selector.push(repl('[data-%(key)s="%(value)s"]', {key: key, value: value}));
    		}

    		selector = $(selector.join(" "));
    		if (selector.length) {
    			frappe.utils.scroll_to(selector);
    		}
    	}
    };

    _f.Frm.prototype.show_success_action = function() {
    	var route = frappe.get_route();
    	if (route[0] !== 'Form') { return; }
    	if (this.meta.is_submittable && this.doc.docstatus !== 1) { return; }

    	var success_action = new frappe.ui.form.SuccessAction(this);
    	success_action.show();
    };

    _f.Frm.prototype.is_first_creation = function() {
    	var ref = this.doc;
    	var modified = ref.modified;
    	var creation = ref.creation;

    	// strip out milliseconds
    	modified = modified.split('.')[0];
    	creation = creation.split('.')[0];

    	return modified === creation;
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt
    /* eslint-disable no-console */

    window.get_server_fields = function(method, arg, table_field, doc, dt, dn, allow_edit, call_back) {
    	console.warn("This function 'get_server_fields' has been deprecated and will be removed soon.");
    	frappe.dom.freeze();
    	if($.isPlainObject(arg)) { arg = JSON.stringify(arg); }
    	return $c('runserverobj', {'method': method, 'docs': JSON.stringify(doc), 'arg': arg },
    		function(r) {
    			frappe.dom.unfreeze();
    			if (r.message)  {
    				var d = locals[dt][dn];
    				var field_dict = r.message;
    				for(var key in field_dict) {
    					d[key] = field_dict[key];
    					if (table_field)
    						{ refresh_field(key, d.name, table_field); }
    					else
    						{ refresh_field(key); }
    				}
    			}
    			if(call_back){
    				doc = locals[doc.doctype][doc.name];
    				call_back(doc, dt, dn);
    			}
    		});
    };


    window.set_multiple = function(dt, dn, dict, table_field) {
    	var d = locals[dt][dn];
    	for(var key in dict) {
    		d[key] = dict[key];
    		if (table_field)
    			{ refresh_field(key, d.name, table_field); }
    		else
    			{ refresh_field(key); }
    	}
    };

    window.refresh_many = function(flist, dn, table_field) {
    	for(var i in flist) {
    		if (table_field)
    			{ refresh_field(flist[i], dn, table_field); }
    		else
    			{ refresh_field(flist[i]); }
    	}
    };

    window.set_field_tip = function(n,txt) {
    	var df = frappe.meta.get_docfield(cur_frm.doctype, n, cur_frm.docname);
    	if(df){ df.description = txt; }

    	if(cur_frm && cur_frm.fields_dict) {
    		if(cur_frm.fields_dict[n])
    			{ cur_frm.fields_dict[n].comment_area.innerHTML = frappe.utils.replace_newlines(txt); }
    		else
    			{ console.log('[set_field_tip] Unable to set field tip: ' + n); }
    	}
    };

    window.refresh_field = function(n, docname, table_field) {
    	// multiple
    	if(typeof n==typeof [])
    		{ refresh_many(n, docname, table_field); }

    	if (n && typeof n==='string' && table_field){
    		var grid = cur_frm.fields_dict[table_field].grid,
    			field = frappe.utils.filter_dict(grid.docfields, {fieldname: n});
    		if (field && field.length){
    			field = field[0];
    			var meta = frappe.meta.get_docfield(field.parent, field.fieldname, docname);
    			$.extend(field, meta);
    			if (docname){
    				cur_frm.fields_dict[table_field].grid.grid_rows_by_docname[docname].refresh_field(n);
    			} else {
    				cur_frm.fields_dict[table_field].grid.refresh();
    			}
    		}
    	} else if(cur_frm) {
    		cur_frm.refresh_field(n);
    	}
    };

    window.set_field_options = function(n, txt) {
    	cur_frm.set_df_property(n, 'options', txt);
    };

    window.set_field_permlevel = function(n, level) {
    	cur_frm.set_df_property(n, 'permlevel', level);
    };

    window.toggle_field = function(n, hidden) {
    	var df = frappe.meta.get_docfield(cur_frm.doctype, n, cur_frm.docname);
    	if(df) {
    		df.hidden = hidden;
    		refresh_field(n);
    	} else {
    		console.log((hidden ? "hide_field" : "unhide_field") + " cannot find field " + n);
    	}
    };

    window.hide_field = function(n) {
    	if(cur_frm) {
    		if(n.substr) { toggle_field(n, 1); }
    		else {
    			for(var i in n) { toggle_field(n[i], 1); }
    		}
    	}
    };

    window.unhide_field = function(n) {
    	if(cur_frm) {
    		if(n.substr) { toggle_field(n, 0); }
    		else {
    			for(var i in n) { toggle_field(n[i], 0); }
    		}
    	}
    };

    window.get_field_obj = function(fn) {
    	return cur_frm.fields_dict[fn];
    };

    _f.Frm.prototype.get_doc = function() {
    	return locals[this.doctype][this.docname];
    };

    _f.Frm.prototype.set_currency_labels = function(fields_list, currency, parentfield) {
    	// To set the currency in the label
    	// For example Total Cost(INR), Total Cost(USD)

    	var me = this;
    	var doctype = parentfield ? this.fields_dict[parentfield].grid.doctype : this.doc.doctype;
    	var field_label_map = {};
    	var grid_field_label_map = {};

    	$.each(fields_list, function(i, fname) {
    		var docfield = frappe.meta.docfield_map[doctype][fname];
    		if(docfield) {
    			var label = __(docfield.label || "").replace(/\([^\)]*\)/g, ""); // eslint-disable-line
    			if(parentfield) {
    				grid_field_label_map[doctype + "-" + fname] =
    					label.trim() + " (" + __(currency) + ")";
    			} else {
    				field_label_map[fname] = label.trim() + " (" + currency + ")";
    			}
    		}
    	});

    	$.each(field_label_map, function(fname, label) {
    		me.fields_dict[fname].set_label(label);
    	});

    	$.each(grid_field_label_map, function(fname, label) {
    		fname = fname.split("-");
    		var df = frappe.meta.get_docfield(fname[0], fname[1], me.doc.name);
    		if(df) { df.label = label; }
    	});
    };

    _f.Frm.prototype.field_map = function(fnames, fn) {
    	var this$1 = this;

    	if(typeof fnames==='string') {
    		if(fnames == '*') {
    			fnames = Object.keys(this.fields_dict);
    		} else {
    			fnames = [fnames];
    		}
    	}
    	for (var i=0, l=fnames.length; i<l; i++) {
    		var fieldname = fnames[i];
    		var field = frappe.meta.get_docfield(cur_frm.doctype, fieldname, this$1.docname);
    		if(field) {
    			fn(field);
    			this$1.refresh_field(fieldname);
    		}
    	}
    };

    _f.Frm.prototype.get_docfield = function(fieldname1, fieldname2) {
    	if(fieldname2) {
    		// for child
    		var doctype = this.get_docfield(fieldname1).options;
    		return frappe.meta.get_docfield(doctype, fieldname2, this.docname);
    	} else {
    		// for parent
    		return frappe.meta.get_docfield(this.doctype, fieldname1, this.docname);
    	}
    };

    _f.Frm.prototype.set_df_property = function(fieldname, property, value, docname, table_field) {
    	var df;
    	if (!docname && !table_field){
    		df = this.get_docfield(fieldname);
    	} else {
    		var grid = this.fields_dict[table_field].grid,
    			fname = frappe.utils.filter_dict(grid.docfields, {'fieldname': fieldname});
    		if (fname && fname.length)
    			{ df = frappe.meta.get_docfield(fname[0].parent, fieldname, docname); }
    	}
    	if(df && df[property] != value) {
    		df[property] = value;
    		refresh_field(fieldname, table_field);
    	}
    };

    _f.Frm.prototype.toggle_enable = function(fnames, enable) {
    	this.field_map(fnames, function(field) {
    		field.read_only = enable ? 0 : 1;
    	});
    };

    _f.Frm.prototype.toggle_reqd = function(fnames, mandatory) {
    	this.field_map(fnames, function(field) {
    		field.reqd = mandatory ? true : false;
    	});
    };

    _f.Frm.prototype.toggle_display = function(fnames, show) {
    	this.field_map(fnames, function(field) {
    		field.hidden = show ? 0 : 1;
    	});
    };

    _f.Frm.prototype.call_server = function(method, args, callback) {
    	return $c_obj(this.doc, method, args, callback);
    };

    _f.Frm.prototype.get_files = function() {
    	return this.attachments
    		? frappe.utils.sort(this.attachments.get_attachments(), "file_name", "string")
    		: [] ;
    };

    _f.Frm.prototype.set_query = function(fieldname, opt1, opt2) {
    	if(opt2) {
    		// on child table
    		// set_query(fieldname, parent fieldname, query)
    		this.fields_dict[opt1].grid.get_field(fieldname).get_query = opt2;
    	} else {
    		// on parent table
    		// set_query(fieldname, query)
    		if(this.fields_dict[fieldname]) {
    			this.fields_dict[fieldname].get_query = opt1;
    		}
    	}
    };

    _f.Frm.prototype.set_value_if_missing = function(field, value) {
    	return this.set_value(field, value, true);
    };

    _f.Frm.prototype.clear_table = function(fieldname) {
    	frappe.model.clear_table(this.doc, fieldname);
    };

    _f.Frm.prototype.add_child = function(fieldname, values) {
    	var doc = frappe.model.add_child(this.doc, frappe.meta.get_docfield(this.doctype, fieldname).options, fieldname);
    	if(values) {
    		// Values of unique keys should not be overridden
    		var d = {};
    		var unique_keys = ["idx", "name"];

    		Object.keys(values).map(function (key) {
    			if(!unique_keys.includes(key)) {
    				d[key] = values[key];
    			}
    		});

    		$.extend(doc, d);
    	}
    	return doc;
    };

    _f.Frm.prototype.set_value = function(field, value, if_missing) {
    	var me = this;
    	var _set = function(f, v) {
    		var fieldobj = me.fields_dict[f];
    		if(fieldobj) {
    			if(!if_missing || !frappe.model.has_value(me.doctype, me.doc.name, f)) {
    				if(fieldobj.df.fieldtype==="Table" && $.isArray(v)) {

    					frappe.model.clear_table(me.doc, fieldobj.df.fieldname);

    					for (var i=0, j=v.length; i < j; i++) {
    						var d = v[i];
    						var child = frappe.model.add_child(me.doc, fieldobj.df.options,
    							fieldobj.df.fieldname, i+1);
    						$.extend(child, d);
    					}

    					me.refresh_field(f);
    					return Promise.resolve();
    				} else {
    					return frappe.model.set_value(me.doctype, me.doc.name, f, v);
    				}
    			}
    		} else {
    			frappe.msgprint(__("Field {0} not found.",[f]));
    			throw "frm.set_value";
    		}
    	};

    	if(typeof field=="string") {
    		return _set(field, value);
    	} else if($.isPlainObject(field)) {
    		var tasks = [];
    		var loop = function ( f ) {
    			var v = field[f];
    			if(me.get_field(f)) {
    				tasks.push(function () { return _set(f, v); });
    			}
    		};

    		for (var f in field) loop( f );
    		return frappe.run_serially(tasks);
    	}
    };

    _f.Frm.prototype.call = function(opts, args, callback) {
    	var me = this;
    	if(typeof opts==='string') {
    		// called as frm.call('do_this', {with_arg: 'arg'});
    		opts = {
    			method: opts,
    			doc: this.doc,
    			args: args,
    			callback: callback
    		};
    	}
    	if(!opts.doc) {
    		if(opts.method.indexOf(".")===-1)
    			{ opts.method = frappe.model.get_server_module_name(me.doctype) + "." + opts.method; }
    		opts.original_callback = opts.callback;
    		opts.callback = function(r) {
    			if($.isPlainObject(r.message)) {
    				if(opts.child) {
    					// update child doc
    					opts.child = locals[opts.child.doctype][opts.child.name];

    					var std_field_list = ["doctype"].concat(frappe.model.std_fields_list);
    					for (var key in r.message) {
    						if (std_field_list.indexOf(key)===-1) {
    							opts.child[key] = r.message[key];
    						}
    					}

    					me.fields_dict[opts.child.parentfield].refresh();
    				} else {
    					// update parent doc
    					me.set_value(r.message);
    				}
    			}
    			opts.original_callback && opts.original_callback(r);
    		};
    	} else {
    		opts.original_callback = opts.callback;
    		opts.callback = function(r) {
    			if(!r.exc) { me.refresh_fields(); }

    			opts.original_callback && opts.original_callback(r);
    		};

    	}
    	return frappe.call(opts);
    };

    _f.Frm.prototype.get_field = function(field) {
    	return this.fields_dict[field];
    };


    _f.Frm.prototype.set_read_only = function() {
    	var perm = [];
    	var docperms = frappe.perm.get_perm(this.doc.doctype);
    	for (var i=0, l=docperms.length; i<l; i++) {
    		var p = docperms[i];
    		perm[p.permlevel || 0] = {read:1, print:1, cancel:1};
    	}
    	this.perm = perm;
    };

    _f.Frm.prototype.trigger = function(event) {
    	return this.script_manager.trigger(event);
    };

    _f.Frm.prototype.get_formatted = function(fieldname) {
    	return frappe.format(this.doc[fieldname],
    		frappe.meta.get_docfield(this.doctype, fieldname, this.docname),
    		{no_icon:true}, this.doc);
    };

    _f.Frm.prototype.open_grid_row = function() {
    	return frappe.ui.form.get_open_grid_form();
    };

    _f.Frm.prototype.is_new = function() {
    	return this.doc.__islocal;
    };

    _f.Frm.prototype.get_title = function() {
    	if(this.meta.title_field) {
    		return this.doc[this.meta.title_field];
    	} else {
    		return this.doc.name;
    	}
    };

    _f.Frm.prototype.get_selected = function() {
    	// returns list of children that are selected. returns [parentfield, name] for each
    	var selected = {}, me = this;
    	frappe.meta.get_table_fields(this.doctype).forEach(function(df) {
    		var _selected = me.fields_dict[df.fieldname].grid.get_selected();
    		if(_selected.length) {
    			selected[df.fieldname] = _selected;
    		}
    	});
    	return selected;
    };

    _f.Frm.prototype.has_mapper = function() {
    	// hackalert!
    	// if open_mapped_doc is mentioned in the custom script, then mapper exists
    	if(this._has_mapper === undefined) {
    		this._has_mapper = (this.meta.__js && this.meta.__js.search('open_mapped_doc')!==-1) ?
    			true: false;
    	}
    	return this._has_mapper;
    };

    _f.Frm.prototype.set_indicator_formatter = function(fieldname, get_color, get_text) {
    	// get doctype from parent
    	var doctype;
    	if(frappe.meta.docfield_map[this.doctype][fieldname]) {
    		doctype = this.doctype;
    	} else {
    		frappe.meta.get_table_fields(this.doctype).every(function(df) {
    			if(frappe.meta.docfield_map[df.options][fieldname]) {
    				doctype = df.options;
    				return false;
    			} else {
    				return true;
    			}
    		});
    	}

    	frappe.meta.docfield_map[doctype][fieldname].formatter =
    		function(value, df, options, doc) {
    			if(value) {
    				var label;
    				if(get_text) {
    					label = get_text(doc);
    				} else if(frappe.form.link_formatters[df.options]) {
    					label = frappe.form.link_formatters[df.options](value, doc);
    				} else {
    					label = value;
    				}

    				var escaped_name = encodeURIComponent(value);
    				return repl('<a class="indicator %(color)s" href="#Form/%(doctype)s/%(name)s">%(label)s</a>', {
    					color: get_color(doc || {}),
    					doctype: df.options,
    					name: escaped_name,
    					label: label
    				});
    			} else {
    				return '';
    			}
    		};
    };

    _f.Frm.prototype.can_create = function(doctype) {
    	// return true or false if the user can make a particlar doctype
    	// will check permission, `can_make_methods` if exists, or will decided on
    	// basis of whether the document is submittable
    	if(!frappe.model.can_create(doctype)) {
    		return false;
    	}

    	if(this.custom_make_buttons && this.custom_make_buttons[doctype]) {
    		// custom buttons are translated and so are the keys
    		var key = __(this.custom_make_buttons[doctype]);
    		// if the button is present, then show make
    		return !!this.custom_buttons[key];
    	}

    	if(this.can_make_methods && this.can_make_methods[doctype]) {
    		return this.can_make_methods[doctype](this);
    	} else {
    		if(this.meta.is_submittable && !this.doc.docstatus==1) {
    			return false;
    		} else {
    			return true;
    		}
    	}
    };

    _f.Frm.prototype.make_new = function(doctype) {
    	// make new doctype from the current form
    	// will handover to `make_methods` if defined
    	// or will create and match link fields
    	var me = this;
    	if(this.make_methods && this.make_methods[doctype]) {
    		return this.make_methods[doctype](this);
    	} else if(this.custom_make_buttons && this.custom_make_buttons[doctype]) {
    		this.custom_buttons[__(this.custom_make_buttons[doctype])].trigger('click');
    	} else {
    		frappe.model.with_doctype(doctype, function() {
    			var new_doc = frappe.model.get_new_doc(doctype);

    			// set link fields (if found)
    			frappe.get_meta(doctype).fields.forEach(function(df) {
    				if(df.fieldtype==='Link' && df.options===me.doctype) {
    					new_doc[df.fieldname] = me.doc.name;
    				}
    			});

    			frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);
    			// frappe.set_route('Form', doctype, new_doc.name);
    		});
    	}
    };

    _f.Frm.prototype.update_in_all_rows = function(table_fieldname, fieldname, value) {
    	// update the child value in all tables where it is missing
    	if(!value) { return; }
    	var cl = this.doc[table_fieldname] || [];
    	for(var i = 0; i < cl.length; i++){
    		if(!cl[i][fieldname]) { cl[i][fieldname] = value; }
    	}
    	refresh_field("items");
    };

    _f.Frm.prototype.get_sum = function(table_fieldname, fieldname) {
    	var this$1 = this;

    	var sum = 0;
    	for (var i = 0, list = (this$1.doc[table_fieldname] || []); i < list.length; i += 1) {
    		var d = list[i];

    		sum += d[fieldname];
    	}
    	return sum;
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");
    frappe.ui.form.Toolbar = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    		this.refresh();
    		this.add_update_button_on_dirty();
    		this.setup_editable_title();
    	},
    	refresh: function() {
    		this.make_menu();
    		this.set_title();
    		this.page.clear_user_actions();
    		this.show_title_as_dirty();
    		this.set_primary_action();

    		if(this.frm.meta.hide_toolbar) {
    			this.page.hide_menu();
    		} else {
    			if(this.frm.doc.__islocal) {
    				this.page.hide_menu();
    				this.print_icon && this.print_icon.addClass("hide");
    			} else {
    				this.page.show_menu();
    				this.print_icon && this.print_icon.removeClass("hide");
    			}
    		}
    	},
    	set_title: function() {
    		if(this.frm.meta.title_field) {
    			var title = strip_html((this.frm.doc[this.frm.meta.title_field] || "").trim() || this.frm.docname);
    			if(this.frm.doc.__islocal || title === this.frm.docname || this.frm.meta.autoname==="hash") {
    				this.page.set_title_sub("");
    			} else {
    				this.page.set_title_sub(this.frm.docname);
    			}
    		} else {
    			var title = this.frm.docname;
    		}
    		title = __(title);
    		this.page.set_title(title);
    		if(this.frm.meta.title_field) {
    			frappe.utils.set_title(title + " - " + this.frm.docname);
    		}
    		this.page.$title_area.toggleClass("editable-title",
    			!!(this.is_title_editable() || this.can_rename()));

    		this.set_indicator();
    	},
    	is_title_editable: function() {
    		if (this.frm.meta.title_field==="title"
    			&& this.frm.perm[0].write
    			&& !this.frm.get_docfield("title").options
    			&& !this.frm.doc.__islocal) {
    			return true;
    		} else {
    			return false;
    		}
    	},
    	can_rename: function() {
    		return this.frm.perm[0].write && this.frm.meta.allow_rename && !this.frm.doc.__islocal;
    	},
    	setup_editable_title: function() {
    		var me = this;
    		this.page.$title_area.find(".title-text").on("click", function() {
    			if(me.is_title_editable()) {
    				frappe.prompt({fieldname: "title", fieldtype:"Data",
    					label: __("Title"), reqd: 1, "default": me.frm.doc.title },
    					function(data) {
    						if(data.title) {
    							me.frm.set_value("title", data.title);
    							if(!me.frm.doc.__islocal) {
    								me.frm.save_or_update();
    							} else {
    								me.set_title();
    							}
    						}
    					}, __("Edit Title"), __("Update"));
    			}
    			if(me.can_rename()) {
    				me.frm.rename_doc();
    			}
    		});
    	},
    	get_dropdown_menu: function(label) {
    		return this.page.add_dropdown(label);
    	},
    	set_indicator: function() {
    		if(this.frm.save_disabled)
    			{ return; }

    		var indicator = frappe.get_indicator(this.frm.doc);
    		if(indicator) {
    			this.page.set_indicator(indicator[0], indicator[1]);
    		} else {
    			this.page.clear_indicator();
    		}
    	},
    	make_menu: function() {
    		this.page.clear_icons();
    		this.page.clear_menu();
    		var me = this;
    		var p = this.frm.perm[0];
    		var docstatus = cint(this.frm.doc.docstatus);
    		var is_submittable = frappe.model.is_submittable(this.frm.doc.doctype);
    		var issingle = this.frm.meta.issingle;
    		var print_settings = frappe.model.get_doc(":Print Settings", "Print Settings");
    		var allow_print_for_draft = cint(print_settings.allow_print_for_draft);
    		var allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);

    		// Print
    		if(!is_submittable || docstatus == 1  ||
    			(allow_print_for_cancelled && docstatus == 2)||
    			(allow_print_for_draft && docstatus == 0)) {
    			if(frappe.model.can_print(null, me.frm) && !issingle) {
    				this.page.add_menu_item(__("Print"), function() {
    					me.frm.print_doc();}, true);
    				this.print_icon = this.page.add_action_icon("fa fa-print", function() {
    					me.frm.print_doc();});
    			}
    		}

    		// email
    		if(frappe.model.can_email(null, me.frm) && me.frm.doc.docstatus < 2) {
    			this.page.add_menu_item(__("Email"), function() {
    				me.frm.email_doc();}, true);
    		}

    		// Linked With
    		if(!me.frm.meta.issingle) {
    			this.page.add_menu_item(__('Links'), function() {
    				me.show_linked_with();
    			}, true);
    		}

    		// copy
    		if(in_list(frappe.boot.user.can_create, me.frm.doctype) && !me.frm.meta.allow_copy) {
    			this.page.add_menu_item(__("Duplicate"), function() {
    				me.frm.copy_doc();}, true);
    		}

    		// rename
    		if(this.can_rename()) {
    			this.page.add_menu_item(__("Rename"), function() {
    				me.frm.rename_doc();}, true);
    		}

    		// reload
    		this.page.add_menu_item(__("Reload"), function() {
    			me.frm.reload_doc();}, true);

    		// add to desktop
    		if(me.frm.meta.issingle) {
    			this.page.add_menu_item(__('Add to Desktop'), function () {
    				frappe.add_to_desktop(me.frm.doctype, me.frm.doctype);
    			}, true);
    		}

    		// delete
    		if((cint(me.frm.doc.docstatus) != 1) && !me.frm.doc.__islocal
    			&& frappe.model.can_delete(me.frm.doctype)) {
    			this.page.add_menu_item(__("Delete"), function() {
    				me.frm.savetrash();}, true);
    		}

    		if(frappe.user_roles.includes("System Manager")) {
    			this.page.add_menu_item(__("Customize"), function() {
    				frappe.set_route("Form", "Customize Form", {
    					doc_type: me.frm.doctype
    				});
    			}, true);

    			if (frappe.boot.developer_mode===1 && me.frm.meta.issingle) {
    				// edit doctype
    				this.page.add_menu_item(__("Edit DocType"), function() {
    					frappe.set_route('Form', 'DocType', me.frm.doctype);
    				}, true);
    			}
    		}

    		// feedback
    		if(!this.frm.doc.__unsaved) {
    			if(is_submittable && docstatus == 1) {
    				this.page.add_menu_item(__("Request Feedback"), function() {
    					var feedback = new frappe.utils.Feedback();
    					feedback.manual_feedback_request(me.frm.doc);
    				}, true);
    			}
    		}

    		// New
    		if(p[CREATE] && !this.frm.meta.issingle) {
    			this.page.add_menu_item(__("New {0} (Ctrl+B)", [__(me.frm.doctype)]), function() {
    				frappe.new_doc(me.frm.doctype, true);}, true);
    		}
    	},
    	can_save: function() {
    		return this.get_docstatus()===0;
    	},
    	can_submit: function() {
    		return this.get_docstatus()===0
    			&& !this.frm.doc.__islocal
    			&& !this.frm.doc.__unsaved
    			&& this.frm.perm[0].submit
    			&& !this.has_workflow();
    	},
    	can_update: function() {
    		return this.get_docstatus()===1
    			&& !this.frm.doc.__islocal
    			&& this.frm.perm[0].submit
    			&& this.frm.doc.__unsaved
    	},
    	can_cancel: function() {
    		return this.get_docstatus()===1
    			&& this.frm.perm[0].cancel
    			&& !this.read_only;
    	},
    	can_amend: function() {
    		return this.get_docstatus()===2
    			&& this.frm.perm[0].amend
    			&& !this.read_only;
    	},
    	has_workflow: function() {
    		if(this._has_workflow === undefined)
    			{ this._has_workflow = frappe.get_list("Workflow", {document_type: this.frm.doctype}).length; }
    		return this._has_workflow;
    	},
    	get_docstatus: function() {
    		return cint(this.frm.doc.docstatus);
    	},
    	show_linked_with: function() {
    		if(!this.frm.linked_with) {
    			this.frm.linked_with = new frappe.ui.form.LinkedWith({
    				frm: this.frm
    			});
    		}
    		this.frm.linked_with.show();
    	},
    	set_primary_action: function(dirty) {
    		if (!dirty) {
    			// don't clear actions menu if dirty
    			this.page.clear_user_actions();
    		}

    		var status = this.get_action_status();
    		if (status) {
    			if (status !== this.current_status) {
    				this.set_page_actions(status);
    			}
    		} else {
    			this.page.clear_actions();
    			this.current_status = null;
    		}
    	},
    	get_action_status: function() {
    		var status = null;
    		if (this.frm.page.current_view_name==='print' || this.frm.hidden) {
    			status = "Edit";
    		} else if (this.can_submit()) {
    			status = "Submit";
    		} else if (this.can_save()) {
    			if (!this.frm.save_disabled) {
    				//Show the save button if there is no workflow or if there is a workflow and there are changes
    				if (this.has_workflow() ? this.frm.doc.__unsaved : true) {
    					status = "Save";
    				}
    			}
    		} else if (this.can_update()) {
    			status = "Update";
    		} else if (this.can_cancel()) {
    			status = "Cancel";
    		} else if (this.can_amend()) {
    			status = "Amend";
    		}
    		return status;
    	},
    	set_page_actions: function(status) {
    		var me = this;
    		this.page.clear_actions();

    		if(status!== 'Edit') {
    			var perm_to_check = this.frm.action_perm_type_map[status];
    			if(!this.frm.perm[0][perm_to_check]) {
    				return;
    			}
    		}

    		if(status === "Edit") {
    			this.page.set_primary_action(__("Edit"), function() {
    				me.frm.page.set_view('main');
    			}, 'octicon octicon-pencil');
    		} else if(status === "Cancel") {
    			this.page.set_secondary_action(__(status), function() {
    				me.frm.savecancel(this);
    			}, "octicon octicon-circle-slash");
    		} else {
    			var click = {
    				"Save": function() {
    					return me.frm.save('Save', null, this);
    				},
    				"Submit": function() {
    					return me.frm.savesubmit(this);
    				},
    				"Update": function() {
    					return me.frm.save('Update', null, this);
    				},
    				"Amend": function() {
    					return me.frm.amend_doc();
    				}
    			}[status];

    			var icon = {
    				"Save": "octicon octicon-check",
    				"Submit": "octicon octicon-lock",
    				"Update": "octicon octicon-check",
    				"Amend": "octicon octicon-split"
    			}[status];

    			this.page.set_primary_action(__(status), click, icon);
    		}

    		this.current_status = status;
    	},
    	make_cancel_amend_button: function() {
    		var me = this;
    		var docstatus = cint(this.frm.doc.docstatus);
    		var p = this.frm.perm[0];
    		var has_workflow = this.has_workflow();

    		if(has_workflow) {
    			return;
    		} else if(docstatus==1 && p[CANCEL]) {
    			this.page.set_secondary_action(__('Cancel'), function() {
    				me.frm.savecancel(this); }, 'fa fa-ban-circle');
    		} else if(docstatus==2 && p[AMEND]) {
    			this.page.set_secondary_action(__('Amend'), function() {
    				me.frm.amend_doc(); }, 'fa fa-pencil', true);
    		}
    	},
    	add_update_button_on_dirty: function() {
    		var me = this;
    		$(this.frm.wrapper).on("dirty", function() {
    			me.show_title_as_dirty();

    			// clear workflow actions
    			me.frm.page.clear_actions_menu();

    			// enable save action
    			if(!me.frm.save_disabled) {
    				me.set_primary_action(true);
    			}
    		});
    	},
    	show_title_as_dirty: function() {
    		if(this.frm.save_disabled)
    			{ return; }

    		if(this.frm.doc.__unsaved) {
    			this.page.set_indicator(__("Not Saved"), "orange");
    		}

    		$(this.frm.wrapper).attr("data-state", this.frm.doc.__unsaved ? "dirty" : "clean");
    	}
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.ui.form.Dashboard = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    		this.section = this.frm.fields_dict._form_dashboard.wrapper;
    		this.parent = this.section.find('.section-body');
    		this.wrapper = $(frappe.render_template('form_dashboard',
    			{frm: this.frm})).appendTo(this.parent);

    		this.progress_area = this.wrapper.find(".progress-area");
    		this.heatmap_area = this.wrapper.find('.form-heatmap');
    		this.chart_area = this.wrapper.find('.form-graph');
    		this.stats_area = this.wrapper.find('.form-stats');
    		this.stats_area_row = this.stats_area.find('.row');
    		this.links_area = this.wrapper.find('.form-links');
    		this.transactions_area = this.links_area.find('.transactions');

    	},
    	reset: function() {
    		this.section.addClass('hidden');
    		this.clear_headline();

    		// clear progress
    		this.progress_area.empty().addClass('hidden');

    		// clear links
    		this.links_area.addClass('hidden');
    		this.links_area.find('.count, .open-notification').addClass('hidden');

    		// clear stats
    		this.stats_area.addClass('hidden');
    		this.stats_area_row.empty();

    		// clear custom
    		this.wrapper.find('.custom').remove();
    	},
    	set_headline: function(html) {
    		this.frm.layout.show_message(html);
    	},
    	clear_headline: function() {
    		this.frm.layout.show_message();
    	},

    	add_comment: function(text, alert_class, permanent) {
    		var me = this;
    		this.set_headline_alert(text, alert_class);
    		if(!permanent) {
    			setTimeout(function() {
    				me.clear_headline();
    			}, 10000);
    		}
    	},

    	clear_comment: function() {
    		this.clear_headline();
    	},

    	set_headline_alert: function(text, indicator_color) {
    		if (!indicator_color) {
    			indicator_color = 'orange';
    		}
    		if(text) {
    			this.set_headline(("<div><span class=\"indicator " + indicator_color + "\">" + text + "</span></div>"));
    		} else {
    			this.clear_headline();
    		}
    	},

    	add_section: function(html) {
    		return $('<div class="form-dashboard-section custom">'+html+'</div>').appendTo(this.wrapper);
    	},

    	add_progress: function(title, percent, message) {
    		var progress_chart = this.make_progress_chart(title);

    		if(!$.isArray(percent)) {
    			percent = this.format_percent(title, percent);
    		}

    		var progress = $('<div class="progress"></div>').appendTo(progress_chart);
    		$.each(percent, function(i, opts) {
    			$(repl('<div class="progress-bar %(progress_class)s" style="width: %(width)s" \
				title="%(title)s"></div>', opts)).appendTo(progress);
    		});

    		if (!message) { message = ''; }
    		$(("<p class=\"progress-message text-muted small\">" + message + "</p>")).appendTo(progress_chart);

    		this.show();

    		return progress_chart;
    	},

    	show_progress: function(title, percent, message) {
    		this._progress_map = this._progress_map || {};
    		if (!this._progress_map[title]) {
    			var progress_chart$1 = this.add_progress(title, percent, message);
    			this._progress_map[title] = progress_chart$1;
    		}
    		var progress_chart = this._progress_map[title];
    		if (!$.isArray(percent)) {
    			percent = this.format_percent(title, percent);
    		}
    		progress_chart.find('.progress-bar').each(function (i, progress_bar) {
    			var ref = percent[i];
    			var progress_class = ref.progress_class;
    			var width = ref.width;
    			$(progress_bar).css('width', width)
    				.removeClass('progress-bar-danger progress-bar-success')
    				.addClass(progress_class);
    		});

    		if (!message) { message = ''; }
    		progress_chart.find('.progress-message').text(message);
    	},

    	hide_progress: function(title) {
    		if (title){
    			this._progress_map[title].remove();
    			delete this._progress_map[title];
    		} else {
    			this._progress_map = {};
    			this.progress_area.empty();
    		}
    	},

    	format_percent: function(title, percent) {
    		var width = cint(percent) < 1 ? 1 : cint(percent);
    		var progress_class = "";
    		if(width < 10)
    			{ progress_class = "progress-bar-danger"; }
    		if(width > 99.9)
    			{ progress_class = "progress-bar-success"; }

    		return [{
    			title: title,
    			width: width + '%',
    			progress_class: progress_class
    		}];
    	},
    	make_progress_chart: function(title) {
    		var progress_chart = $('<div class="progress-chart" title="'+(title || '')+'"></div>')
    			.appendTo(this.progress_area.removeClass('hidden'));
    		return progress_chart;
    	},

    	refresh: function() {
    		this.reset();
    		if(this.frm.doc.__islocal) {
    			return;
    		}

    		if(!this.data) {
    			this.init_data();
    		}

    		var show = false;

    		if(this.data && (this.data.transactions || []).length) {
    			if(this.data.docstatus && this.frm.doc.docstatus !== this.data.docstatus) {
    				// limited docstatus
    				return;
    			}
    			this.render_links();
    			this.set_open_count();
    			show = true;
    		}

    		if(this.data.heatmap) {
    			this.render_heatmap();
    			show = true;
    		}

    		if(this.data.graph) {
    			this.setup_graph();
    			show = true;
    		}

    		if(show) {
    			this.show();
    		}
    	},

    	after_refresh: function() {
    		var me = this;
    		// show / hide new buttons (if allowed)
    		this.links_area.find('.btn-new').each(function() {
    			if(me.frm.can_create($(this).attr('data-doctype'))) {
    				$(this).removeClass('hidden');
    			}
    		});
    	},

    	init_data: function() {
    		this.data = this.frm.meta.__dashboard || {};
    		if(!this.data.transactions) { this.data.transactions = []; }
    		if(!this.data.internal_links) { this.data.internal_links = {}; }
    		this.filter_permissions();
    	},

    	add_transactions: function(opts) {
    		var this$1 = this;

    		// add additional data on dashboard
    		var group_added = [];

    		if(!Array.isArray(opts)) { opts=[opts]; }

    		if(!this.data) {
    			this.init_data();
    		}

    		if(this.data && (this.data.transactions || []).length) {
    			// check if label already exists, add items to it
    			this.data.transactions.map(function (group) {
    				opts.map(function (d) {
    					var ref;

    					if(d.label == group.label) {
    						group_added.push(d.label);
    						(ref = group.items).push.apply(ref, d.items);
    					}
    				});
    			});

    			// if label not already present, add new label and items under it
    			opts.map(function (d) {
    				if(!group_added.includes(d.label)) {
    					this$1.data.transactions.push(d);
    				}
    			});

    			this.filter_permissions();
    		}
    	},

    	filter_permissions: function() {
    		// filter out transactions for which the user
    		// does not have permission
    		var transactions = [];
    		(this.data.transactions || []).forEach(function(group) {
    			var items = [];
    			group.items.forEach(function(doctype) {
    				if(frappe.model.can_read(doctype)) {
    					items.push(doctype);
    				}
    			});

    			// only add thie group, if there is atleast
    			// one item with permission
    			if(items.length) {
    				group.items = items;
    				transactions.push(group);
    			}
    		});
    		this.data.transactions = transactions;
    	},
    	render_links: function() {
    		var me = this;
    		this.links_area.removeClass('hidden');
    		this.links_area.find('.btn-new').addClass('hidden');
    		if(this.data_rendered) {
    			return;
    		}

    		//this.transactions_area.empty();

    		this.data.frm = this.frm;

    		$(frappe.render_template('form_links', this.data))
    			.appendTo(this.transactions_area);

    		// bind links
    		this.transactions_area.find(".badge-link").on('click', function() {
    			me.open_document_list($(this).parent());
    		});

    		// bind open notifications
    		this.transactions_area.find('.open-notification').on('click', function() {
    			me.open_document_list($(this).parent(), true);
    		});

    		// bind new
    		this.transactions_area.find('.btn-new').on('click', function() {
    			me.frm.make_new($(this).attr('data-doctype'));
    		});

    		this.data_rendered = true;
    	},
    	open_document_list: function($link, show_open) {
    		// show document list with filters
    		var doctype = $link.attr('data-doctype'),
    			names = $link.attr('data-names') || [];

    		if(this.data.internal_links[doctype]) {
    			if(names.length) {
    				frappe.route_options = {'name': ['in', names]};
    			} else {
    				return false;
    			}
    		} else if(this.data.fieldname) {
    			frappe.route_options = this.get_document_filter(doctype);
    			if(show_open) {
    				frappe.ui.notifications.show_open_count_list(doctype);
    			}
    		}

    		frappe.set_route("List", doctype, "List");
    	},
    	get_document_filter: function(doctype) {
    		// return the default filter for the given document
    		// like {"customer": frm.doc.name}
    		var filter = {};
    		var fieldname = this.data.non_standard_fieldnames
    			? (this.data.non_standard_fieldnames[doctype] || this.data.fieldname)
    			: this.data.fieldname;
    		filter[fieldname] = this.frm.doc.name;
    		return filter;
    	},
    	set_open_count: function() {
    		if(!this.data.transactions || !this.data.fieldname) {
    			return;
    		}

    		// list all items from the transaction list
    		var items = [],
    			me = this;

    		this.data.transactions.forEach(function(group) {
    			group.items.forEach(function(item) { items.push(item); });
    		});

    		var method = this.data.method || 'frappe.desk.notifications.get_open_count';
    		frappe.call({
    			type: "GET",
    			method: method,
    			args: {
    				doctype: this.frm.doctype,
    				name: this.frm.doc.name,
    				items: items
    			},
    			callback: function(r) {
    				if(r.message.timeline_data) {
    					me.update_heatmap(r.message.timeline_data);
    				}

    				// update badges
    				$.each(r.message.count, function(i, d) {
    					me.frm.dashboard.set_badge_count(d.name, cint(d.open_count), cint(d.count));
    				});

    				// update from internal links
    				$.each(me.data.internal_links, function(doctype, link) {
    					var table_fieldname = link[0], link_fieldname = link[1];
    					var names = [];
    					(me.frm.doc[table_fieldname] || []).forEach(function(d) {
    						var value = d[link_fieldname];
    						if(value && names.indexOf(value)===-1) {
    							names.push(value);
    						}
    					});
    					me.frm.dashboard.set_badge_count(doctype, 0, names.length, names);
    				});

    				me.frm.dashboard_data = r.message;
    				me.frm.trigger('dashboard_update');
    			}
    		});

    	},
    	set_badge_count: function(doctype, open_count, count, names) {
    		var $link = $(this.transactions_area)
    			.find('.document-link[data-doctype="'+doctype+'"]');

    		if(open_count) {
    			$link.find('.open-notification')
    				.removeClass('hidden')
    				.html((open_count > 99) ? '99+' : open_count);
    		}

    		if(count) {
    			$link.find('.count')
    				.removeClass('hidden')
    				.html((count > 99) ? '99+' : count);
    		}

    		if(this.data.internal_links[doctype]) {
    			if(names && names.length) {
    				$link.attr('data-names', names ? names.join(',') : '');
    			} else {
    				$link.find('a').attr('disabled', true);
    			}
    		}
    	},

    	update_heatmap: function(data) {
    		if(this.heatmap) {
    			this.heatmap.update(data);
    		}
    	},

    	// heatmap
    	render_heatmap: function() {
    		if(!this.heatmap) {
    			this.heatmap = new Chart("#heatmap-" + frappe.model.scrub(this.frm.doctype), {
    				type: 'heatmap',
    				height: 120,
    				start: new Date(moment().subtract(1, 'year').toDate()),
    				count_label: "interactions",
    				discreteDomains: 0,
    				data: {}
    			});

    			// center the heatmap
    			this.heatmap_area.removeClass('hidden').find('svg').css({'margin': 'auto'});

    			// message
    			var heatmap_message = this.heatmap_area.find('.heatmap-message');
    			if(this.data.heatmap_message) {
    				heatmap_message.removeClass('hidden').html(this.data.heatmap_message);
    			} else {
    				heatmap_message.addClass('hidden');
    			}
    		}
    	},

    	add_indicator: function(label, color) {
    		this.show();
    		this.stats_area.removeClass('hidden');


    		// set colspan
    		var indicators = this.stats_area_row.find('.indicator-column');
    		var n_indicators = indicators.length + 1;
    		var colspan;
    		if(n_indicators > 4) { colspan = 3; }
    		else { colspan = 12 / n_indicators; }

    		// reset classes in existing indicators
    		if(indicators.length) {
    			indicators.removeClass().addClass('col-sm-'+colspan).addClass('indicator-column');
    		}

    		var indicator = $('<div class="col-sm-'+colspan+' indicator-column"><span class="indicator '+color+'">'
    			+label+'</span></div>').appendTo(this.stats_area_row);

    		return indicator;
    	},

    	// graphs
    	setup_graph: function() {
    		var me = this;
    		var method = this.data.graph_method;
    		var args = {
    			doctype: this.frm.doctype,
    			docname: this.frm.doc.name,
    		};
    		$.extend(args, this.data.graph_method_args);

    		frappe.call({
    			type: "GET",
    			method: method,
    			args: args,

    			callback: function(r) {
    				if(r.message) {
    					me.render_graph(r.message);
    				}
    			}
    		});
    	},

    	render_graph: function(args) {
    		this.chart_area.empty().removeClass('hidden');
    		$.extend(args, {
    			type: 'line',
    			colors: ['green']
    		});
    		this.show();

    		this.chart = new Chart('.form-graph', args);
    		if(!this.chart) {
    			this.hide();
    		}
    	},

    	show: function() {
    		this.section.removeClass('hidden');
    	},

    	hide: function() {
    		this.section.addClass('hidden');
    	}
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide('frappe.document_flow');

    frappe.ui.form.DocumentFlow = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);

    		this.module = frappe.get_meta(this.frm.doctype).module;
    		if (!frappe.document_flow || !frappe.document_flow[this.module]) {
    			return;
    		}
    		this.doctypes = frappe.document_flow[this.module][this.frm.doctype];
    		if (!this.doctypes) {
    			return;
    		}

    		this.wrapper = $('<div class="document-flow-wrapper hidden"></div>').prependTo(this.frm.layout.wrapper);
    	},

    	refresh: function() {
    		if(this.doctypes) {
    			this.reset();
    			this.render();
    		}
    	},

    	reset: function() {
    		this.wrapper.empty().addClass('hidden');
    		this.linked_with = {};
    	},

    	render: function() {
    		var me = this;

    		$(frappe.render_template('form_document_flow', {
    			frm: this.frm,
    			doctypes: this.doctypes,
    		})).appendTo(this.wrapper.removeClass('hidden'));

    		this.wrapper.on('click', '.document-flow-link', function() {
    			var doctype = $(this).attr("data-doctype");
    			if (me.frm.doctype != doctype) {
    				me.get_linked_docs(doctype);
    				return false;
    			}
    		});

    		if (!this.frm.doc.__islocal) {
    			this.mark_completed_flow();
    		}

    	},

    	get_linked_docs: function(for_doctype) {
    		if(!this.linked_with[for_doctype]) {
    			this.linked_with[for_doctype] = new frappe.ui.form.LinkedWith({
    				frm: this.frm,
    				for_doctype: for_doctype
    			});
    		}

    		this.linked_with[for_doctype].show();
    	},

    	mark_completed_flow: function() {
    		var me = this;
    		frappe.call({
    			method: "frappe.desk.form.document_flow.get_document_completion_status",
    			args: {
    				doctypes: me.doctypes,
    				frm_doctype: me.frm.doctype,
    				frm_docname: me.frm.docname
    			},
    			callback: function(r){
    				if(!r.message) {
    					return;
    				}
    				$.each(me.doctypes, function(i, doctype) {
    					if (r.message[doctype] && me.frm.doctype!=doctype) {
    						me.wrapper.find("[data-doctype='"+doctype+"']a .indicator")
    							.removeClass("darkgrey")
    							.addClass("black");
    					}
    				});
    			}
    		});
    	}
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");

    frappe.ui.form.save = function (frm, action, callback, btn) {
    	$(btn).prop("disabled", true);

    	// specified here because there are keyboard shortcuts to save
    	var working_label = {
    		"Save": __("Saving"),
    		"Submit": __("Submitting"),
    		"Update": __("Updating"),
    		"Amend": __("Amending"),
    		"Cancel": __("Cancelling")
    	}[toTitle(action)];

    	var freeze_message = working_label ? __(working_label) : "";

    	var save = function () {
    		remove_empty_rows();

    		$(frm.wrapper).addClass('validated-form');
    		if (check_mandatory()) {
    			_call({
    				method: "frappe.desk.form.save.savedocs",
    				args: { doc: frm.doc, action: action },
    				callback: function (r) {
    					$(document).trigger("save", [frm.doc]);
    					callback(r);
    				},
    				error: function (r) {
    					callback(r);
    				},
    				btn: btn,
    				freeze_message: freeze_message
    			});
    		} else {
    			$(btn).prop("disabled", false);
    		}
    	};

    	var remove_empty_rows = function() {
    		/**
    		This function removes empty rows. Note that in this function, a row is considered
    		empty if the fields with `in_list_view: 1` are undefined or falsy because that's
    		what users also consider to be an empty row
    		 */
    		var docs = frappe.model.get_all_docs(frm.doc);

    		// we should only worry about table data
    		var tables = docs.filter(function(d){
    			return frappe.model.is_table(d.doctype);
    		});

    		tables.map(
    			function(doc){
    				var cells = frappe.meta.docfield_list[doc.doctype] || [];

    				var in_list_view_cells = cells.filter(function(df) {
    					return cint(df.in_list_view) === 1;
    				});

    				var is_empty_row = function(cells) {
    					for (var i=0; i < cells.length; i++){
    						if(locals[doc.doctype][doc.name][cells[i].fieldname]){
    							return false;
    						}
    					}
    					return true;
    				};

    				if (is_empty_row(in_list_view_cells)) {
    					frappe.model.clear_doc(doc.doctype, doc.name);
    				}
    			}
    		);
    	};

    	var cancel = function () {
    		var args = {
    			doctype: frm.doc.doctype,
    			name: frm.doc.name
    		};

    		// update workflow state value if workflow exists
    		var workflow_state_fieldname = frappe.workflow.get_state_fieldname(frm.doctype);
    		if (workflow_state_fieldname) {
    			$.extend(args, {
    				workflow_state_fieldname: workflow_state_fieldname,
    				workflow_state: frm.doc[workflow_state_fieldname]

    			});
    		}

    		_call({
    			method: "frappe.desk.form.save.cancel",
    			args: args,
    			callback: function (r) {
    				$(document).trigger("save", [frm.doc]);
    				callback(r);
    			},
    			btn: btn,
    			freeze_message: freeze_message
    		});
    	};

    	var check_mandatory = function () {
    		var has_errors = false;
    		frm.scroll_set = false;

    		if (frm.doc.docstatus == 2) { return true; } // don't check for cancel

    		$.each(frappe.model.get_all_docs(frm.doc), function (i, doc) {
    			var error_fields = [];
    			var folded = false;

    			$.each(frappe.meta.docfield_list[doc.doctype] || [], function (i, docfield) {
    				if (docfield.fieldname) {
    					var df = frappe.meta.get_docfield(doc.doctype,
    						docfield.fieldname, frm.doc.name);

    					if (df.fieldtype === "Fold") {
    						folded = frm.layout.folded;
    					}

    					if (df.reqd && !frappe.model.has_value(doc.doctype, doc.name, df.fieldname)) {
    						has_errors = true;
    						error_fields[error_fields.length] = __(df.label);
    						// scroll to field
    						if (!frm.scroll_set) {
    							scroll_to(doc.parentfield || df.fieldname);
    						}

    						if (folded) {
    							frm.layout.unfold();
    							folded = false;
    						}
    					}

    				}
    			});

    			if (error_fields.length) {
    				if (doc.parenttype) {
    					var message = __('Mandatory fields required in table {0}, Row {1}',
    						[__(frappe.meta.docfield_map[doc.parenttype][doc.parentfield].label).bold(), doc.idx]);
    				} else {
    					var message = __('Mandatory fields required in {0}', [__(doc.doctype)]);

    				}
    				message = message + '<br><br><ul><li>' + error_fields.join('</li><li>') + "</ul>";
    				frappe.msgprint({
    					message: message,
    					indicator: 'red',
    					title: __('Missing Fields')
    				});
    			}
    		});

    		return !has_errors;
    	};

    	var scroll_to = function (fieldname) {
    		var f = cur_frm.fields_dict[fieldname];
    		if (f) {
    			$(document).scrollTop($(f.wrapper).offset().top - 60);
    		}
    		frm.scroll_set = true;
    	};

    	var _call = function (opts) {
    		// opts = {
    		// 	method: "some server method",
    		// 	args: {args to be passed},
    		// 	callback: callback,
    		// 	btn: btn
    		// }

    		if (frappe.ui.form.is_saving) {
    			// this is likely to happen if the user presses the shortcut cmd+s for a longer duration or uses double click
    			// no need to show this to user, as they can see "Saving" in freeze message
    			console.log("Already saving. Please wait a few moments.");
    			throw "saving";
    		}

    		frappe.ui.form.remove_old_form_route();
    		frappe.ui.form.is_saving = true;

    		return frappe.call({
    			freeze: true,
    			// freeze_message: opts.freeze_message,
    			method: opts.method,
    			args: opts.args,
    			btn: opts.btn,
    			callback: function (r) {
    				opts.callback && opts.callback(r);
    			},
    			error: opts.error,
    			always: function (r) {
    				$(btn).prop("disabled", false);
    				frappe.ui.form.is_saving = false;
    				if (r) {
    					var doc = r.docs && r.docs[0];
    					if (doc) {
    						frappe.ui.form.update_calling_link(doc);
    					}
    				}
    			}
    		})
    	};

    	if (action === "cancel") {
    		cancel();
    	} else {
    		save();
    	}
    };

    frappe.ui.form.remove_old_form_route = function () {
    	var index = -1;
    	var current_route = frappe.get_route();
    	frappe.route_history.map(function (arr, i) {
    		if (arr.join("/") === current_route.join("/")) {
    			index = i;
    		}
    	});
    	frappe.route_history.splice(index, 1);
    };

    frappe.ui.form.update_calling_link = function (newdoc) {
    	if (frappe._from_link && newdoc.doctype === frappe._from_link.df.options) {
    		var doc = frappe.get_doc(frappe._from_link.doctype, frappe._from_link.docname);
    		// set value
    		if (doc && doc.parentfield) {
    			//update values for child table
    			$.each(frappe._from_link.frm.fields_dict[doc.parentfield].grid.grid_rows, function (index, field) {
    				if (field.doc && field.doc.name === frappe._from_link.docname) {
    					frappe._from_link.set_value(newdoc.name);
    				}
    			});
    		} else {
    			frappe._from_link.set_value(newdoc.name);
    		}

    		// refresh field
    		frappe._from_link.refresh();

    		// if from form, switch
    		if (frappe._from_link.frm) {
    			frappe.set_route("Form",
    				frappe._from_link.frm.doctype, frappe._from_link.frm.docname)
    				.then(function () {
    					frappe.utils.scroll_to(frappe._from_link_scrollY);
    				});
    		}

    		frappe._from_link = null;
    	}
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form.handlers");

    frappe.ui.form.get_event_handler_list = function(doctype, fieldname) {
    	if(!frappe.ui.form.handlers[doctype]) {
    		frappe.ui.form.handlers[doctype] = {};
    	}
    	if(!frappe.ui.form.handlers[doctype][fieldname]) {
    		frappe.ui.form.handlers[doctype][fieldname] = [];
    	}
    	return frappe.ui.form.handlers[doctype][fieldname];
    };

    frappe.ui.form.on = frappe.ui.form.on_change = function(doctype, fieldname, handler) {
    	var add_handler = function(fieldname, handler) {
    		var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
    		handler_list.push(handler);

    		// add last handler to events so it can be called as
    		// frm.events.handler(frm)
    		if(cur_frm && cur_frm.doctype===doctype) {
    			cur_frm.events[fieldname] = handler;
    		}
    	};

    	if (!handler && $.isPlainObject(fieldname)) {
    		// a dict of handlers {fieldname: handler, ...}
    		for (var key in fieldname) {
    			var fn = fieldname[key];
    			if (typeof fn === "function") {
    				add_handler(key, fn);
    			}
    		}
    	} else {
    		add_handler(fieldname, handler);
    	}
    };

    // remove standard event handlers
    frappe.ui.form.off = function(doctype, fieldname, handler) {
    	var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
    	if(handler_list.length) {
    		frappe.ui.form.handlers[doctype][fieldname] = [];
    	}

    	if(cur_frm && cur_frm.doctype===doctype && cur_frm.events[fieldname]) {
    		delete cur_frm.events[fieldname];
    	}

    	if(cur_frm && cur_frm.cscript && cur_frm.cscript[fieldname]) {
    		delete cur_frm.cscript[fieldname];
    	}
    };


    frappe.ui.form.trigger = function(doctype, fieldname) {
    	cur_frm.script_manager.trigger(fieldname, doctype);
    };

    frappe.ui.form.ScriptManager = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    	},
    	make: function(ControllerClass) {
    		this.frm.cscript = $.extend(this.frm.cscript,
    			new ControllerClass({frm: this.frm}));
    	},
    	trigger: function(event_name, doctype, name) {
    		// trigger all the form level events that
    		// are bound to this event_name
    		var me = this;
    		doctype = doctype || this.frm.doctype;
    		name = name || this.frm.docname;

    		var tasks = [];
    		var handlers = this.get_handlers(event_name, doctype);

    		// helper for child table
    		this.frm.selected_doc = frappe.get_doc(doctype, name);

    		var runner = function (_function, is_old_style) {
    			var _promise = null;
    			if(is_old_style) {
    				// old style arguments (doc, cdt, cdn)
    				_promise = me.frm.cscript[_function](me.frm.doc, doctype, name);
    			} else {
    				// new style (frm, doctype, name)
    				_promise = _function(me.frm, doctype, name);
    			}

    			// if the trigger returns a promise, return it,
    			// or use the default promise frappe.after_ajax
    			if (_promise && _promise.then) {
    				return _promise;
    			} else {
    				return frappe.after_server_call();
    			}
    		};

    		// make list of functions to be run serially
    		handlers.new_style.forEach(function (_function) {
    			if(event_name==='setup') {
    				// setup must be called immediately
    				runner(_function, false);
    			} else {
    				tasks.push(function () { return runner(_function, false); });
    			}
    		});

    		handlers.old_style.forEach(function (_function) {
    			if(event_name==='setup') {
    				// setup must be called immediately
    				runner(_function, true);
    			} else {
    				tasks.push(function () { return runner(_function, true); });
    			}
    		});

    		// run them serially
    		return frappe.run_serially(tasks);
    	},
    	has_handlers: function(event_name, doctype) {
    		var handlers = this.get_handlers(event_name, doctype);
    		return handlers && (handlers.old_style.length || handlers.new_style.length);
    	},
    	get_handlers: function(event_name, doctype) {
    		var handlers = {
    			old_style: [],
    			new_style: []
    		};
    		if(frappe.ui.form.handlers[doctype] && frappe.ui.form.handlers[doctype][event_name]) {
    			$.each(frappe.ui.form.handlers[doctype][event_name], function(i, fn) {
    				handlers.new_style.push(fn);
    			});
    		}
    		if(this.frm.cscript[event_name]) {
    			handlers.old_style.push(event_name);
    		}
    		if(this.frm.cscript["custom_" + event_name]) {
    			handlers.old_style.push("custom_" + event_name);
    		}
    		return handlers;
    	},
    	setup: function() {
    		var doctype = this.frm.meta;
    		var me = this;

    		// js
    		var cs = doctype.__js;
    		if(cs) {
    			var tmp = eval(cs);
    		}

    		if(doctype.__custom_js) {
    			try {
    				eval(doctype.__custom_js);
    			} catch(e) {
    				frappe.msgprint({
    					title: __('Error in Custom Script'),
    					indicator: 'orange',
    					message: '<pre class="small"><code>' + e.stack  + '</code></pre>'
    				});
    			}
    		}

    		function setup_add_fetch(df) {
    			if((['Data', 'Read Only', 'Text', 'Small Text', 'Currency',
    				'Text Editor', 'Code', 'Link', 'Float', 'Int', 'Date'].includes(df.fieldtype) || df.read_only==1)
    				&& df.fetch_from && df.fetch_from.indexOf(".")!=-1) {
    				var parts = df.fetch_from.split(".");
    				me.frm.add_fetch(parts[0], parts[1], df.fieldname);
    			}
    		}

    		// setup add fetch
    		$.each(this.frm.fields, function(i, field) {
    			setup_add_fetch(field.df);
    			if(field.df.fieldtype==="Table") {
    				$.each(frappe.meta.get_docfields(field.df.options, me.frm.docname), function(i, df) {
    					setup_add_fetch(df);
    				});
    			}
    		});

    		// css
    		doctype.__css && frappe.dom.set_style(doctype.__css);

    		this.trigger('setup');
    	},
    	log_error: function(caller, e) {
    		frappe.show_alert("Error in Client Script.");
    		console.group && console.group();
    		console.log("----- error in client script -----");
    		console.log("method: " + caller);
    		console.log(e);
    		console.log("error message: " + e.message);
    		console.trace && console.trace();
    		console.log("----- end of error message -----");
    		console.group && console.groupEnd();
    	},
    	copy_from_first_row: function(parentfield, current_row, fieldnames) {
    		var data = this.frm.doc[parentfield];
    		if(data.length===1 || data[0]===current_row) { return; }

    		if(typeof fieldnames==='string') {
    			fieldnames = [fieldnames];
    		}

    		$.each(fieldnames, function(i, fieldname) {
    			frappe.model.set_value(current_row.doctype, current_row.name, fieldname,
    				data[0][fieldname]);
    		});
    	}
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");

    frappe.ui.form.LinkedWith = class LinkedWith {

    	constructor(opts) {
    		$.extend(this, opts);
    	}

    	show() {
    		if(!this.dialog)
    			{ this.make_dialog(); }

    		$(this.dialog.body).html(
    			("<div class=\"text-muted text-center\" style=\"padding: 30px 0px\">\n\t\t\t\t" + (__("Loading")) + "...\n\t\t\t</div>"));

    		this.dialog.show();
    	}

    	make_dialog() {
    		var this$1 = this;


    		this.dialog = new frappe.ui.Dialog({
    			hide_on_page_refresh: true,
    			title: __("Linked With")
    		});

    		this.dialog.on_page_show = function () {
    			// execute ajax calls sequentially
    			// 1. get linked doctypes
    			// 2. load all doctypes
    			// 3. load linked docs
    			this$1.get_linked_doctypes()
    				.then(function () { return this$1.load_doctypes(); })
    				.then(function () { return this$1.links_not_permitted_or_missing(); })
    				.then(function () { return this$1.get_linked_docs(); })
    				.then(function () { return this$1.make_html(); });
    		};
    	}

    	make_html() {
    		var this$1 = this;

    		var linked_docs = this.frm.__linked_docs;

    		var html = '';

    		var linked_doctypes = Object.keys(linked_docs);

    		if (linked_doctypes.length === 0) {
    			html = __("Not Linked to any record");
    		} else {
    			html = linked_doctypes.map(function (doctype) {
    				var docs = linked_docs[doctype];
    				return ("\n\t\t\t\t\t<div class=\"list-item-table margin-bottom\">\n\t\t\t\t\t\t" + (this$1.make_doc_head(doctype)) + "\n\t\t\t\t\t\t" + (docs.map(function (doc) { return this$1.make_doc_row(doc, doctype); }).join('')) + "\n\t\t\t\t\t</div>\n\t\t\t\t");
    			}).join('');
    		}

    		$(this.dialog.body).html(html);
    	}

    	load_doctypes() {
    		var this$1 = this;

    		var already_loaded = Object.keys(locals.DocType);
    		var doctypes_to_load = [];

    		if (this.frm.__linked_doctypes) {
    			doctypes_to_load =
    				Object.keys(this.frm.__linked_doctypes)
    					.filter(function (doctype) { return !already_loaded.includes(doctype); });
    		}

    		// load all doctypes asynchronously using with_doctype
    		var promises = doctypes_to_load.map(function (dt) {
    			return frappe.model.with_doctype(dt, function () {
    				if(frappe.listview_settings[dt]) {
    					// add additional fields to __linked_doctypes
    					this$1.frm.__linked_doctypes[dt].add_fields =
    						frappe.listview_settings[dt].add_fields;
    				}
    			});
    		});

    		return Promise.all(promises);
    	}

    	links_not_permitted_or_missing() {
    		var links = null;

    		if (this.frm.__linked_doctypes) {
    			links =
    				Object.keys(this.frm.__linked_doctypes)
    					.filter(frappe.model.can_get_report);
    		}

    		var flag;
    		if(!links) {
    			$(this.dialog.body).html(("" + (this.frm.__linked_doctypes
    				? __("Not enough permission to see links")
    				: __("Not Linked to any record"))));
    			flag = true;
    		}
    		flag = false;

    		// reject Promise if not_permitted or missing
    		return new Promise(
    			function (resolve, reject) { return flag ? reject() : resolve(); }
    		);
    	}

    	get_linked_doctypes() {
    		var this$1 = this;

    		return new Promise(function (resolve) {
    			if (this$1.frm.__linked_doctypes) {
    				resolve();
    			}

    			frappe.call({
    				method: "frappe.desk.form.linked_with.get_linked_doctypes",
    				args: {
    					doctype: this$1.frm.doctype
    				},
    				callback: function (r) {
    					this$1.frm.__linked_doctypes = r.message;
    					resolve();
    				}
    			});
    		});
    	}

    	get_linked_docs() {
    		var this$1 = this;

    		return frappe.call({
    			method: "frappe.desk.form.linked_with.get_linked_docs",
    			args: {
    				doctype: this.frm.doctype,
    				name: this.frm.docname,
    				linkinfo: this.frm.__linked_doctypes,
    				for_doctype: this.for_doctype
    			},
    			callback: function (r) {
    				this$1.frm.__linked_docs = r.message || {};
    			}
    		});
    	}

    	make_doc_head(heading) {
    		return ("\n\t\t\t<header class=\"level list-row list-row-head text-muted small\">\n\t\t\t\t<div>" + (__(heading)) + "</div>\n\t\t\t</header>\n\t\t");
    	}

    	make_doc_row(doc, doctype) {
    		return ("<div class=\"list-row-container\">\n\t\t\t<div class=\"level list-row small\">\n\t\t\t\t<div class=\"level-left bold\">\n\t\t\t\t\t<a href=\"#Form/" + doctype + "/" + (doc.name) + "\">" + (doc.name) + "</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>");
    	}
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.ui.form.States = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    		this.state_fieldname = frappe.workflow.get_state_fieldname(this.frm.doctype);

    		// no workflow?
    		if(!this.state_fieldname)
    			{ return; }

    		this.update_fields = frappe.workflow.get_update_fields(this.frm.doctype);

    		var me = this;
    		$(this.frm.wrapper).bind("render_complete", function() {
    			me.refresh();
    		});
    	},

    	setup_help: function() {
    		var me = this;
    		this.frm.page.add_action_item(__("Help"), function() {
    			frappe.workflow.setup(me.frm.doctype);
    			var state = me.get_state();
    			var d = new frappe.ui.Dialog({
    				title: "Workflow: "
    					+ frappe.workflow.workflows[me.frm.doctype].name
    			});

    			frappe.workflow.get_transitions(me.frm.doc).then(function (transitions) {
    				var next_html = $.map(transitions,
    					function(d) {
    						return d.action.bold() + __(" by Role ") + d.allowed;
    					}).join(", ") || __("None: End of Workflow").bold();

    				$(d.body).html("<p>"+__("Current status")+": " + state.bold() + "</p>"
    					+ "<p>"+__("Document is only editable by users of role")+": "
    						+ frappe.workflow.get_document_state(me.frm.doctype,
    							state).allow_edit.bold() + "</p>"
    					+ "<p>"+__("Next actions")+": "+ next_html +"</p>"
    					+ (me.frm.doc.__islocal ? ("<div class='alert alert-info'>"
    						+__("Workflow will start after saving.")+"</div>") : "")
    					+ "<p class='help'>"+__("Note: Other permission rules may also apply")+"</p>"
    				).css({padding: '15px'});
    				d.show();
    			});
    		}, true);
    	},

    	refresh: function() {
    		// hide if its not yet saved
    		if(this.frm.doc.__islocal) {
    			this.set_default_state();
    			return;
    		}

    		// state text
    		var state = this.get_state();

    		var doctype = this.frm.doctype;

    		if(state) {
    			// show actions from that state
    			this.show_actions(state);
    		}
    	},

    	show_actions: function() {
    		var added = false,
    			me = this;

    		this.frm.page.clear_actions_menu();

    		// if the loaded doc is dirty, don't show workflow buttons
    		if (this.frm.doc.__unsaved===1) {
    			return;
    		}

    		function has_approval_access(transition) {
    			var approval_access = false;
    			var user = frappe.session.user;
    			if (user === 'Administrator'
    				|| transition.allow_self_approval
    				|| user !== me.frm.doc.owner) {
    				approval_access = true;
    			}
    			return approval_access;
    		}

    		frappe.workflow.get_transitions(this.frm.doc).then(function (transitions) {
    			$.each(transitions, function(i, d) {
    				if(frappe.user_roles.includes(d.allowed) && has_approval_access(d)) {
    					added = true;
    					me.frm.page.add_action_item(__(d.action), function() {
    						frappe.xcall('frappe.model.workflow.apply_workflow',
    							{doc: me.frm.doc, action: d.action})
    							.then(function (doc) {
    								frappe.model.sync(doc);
    								me.frm.refresh();
    							});
    					});
    				}
    			});
    		});

    		if(added) {
    			this.frm.page.btn_primary.addClass("hide");
    			this.frm.toolbar.current_status = "";
    			this.setup_help();
    		}
    	},

    	set_default_state: function() {
    		var default_state = frappe.workflow.get_default_state(this.frm.doctype, this.frm.doc.docstatus);
    		if(default_state) {
    			this.frm.set_value(this.state_fieldname, default_state);
    		}
    	},

    	get_state: function() {
    		if(!this.frm.doc[this.state_fieldname]) {
    			this.set_default_state();
    		}
    		return this.frm.doc[this.state_fieldname];
    	}
    });

    frappe.provide("frappe.ui.form");

    frappe.ui.form.PrintPreview = Class.extend({
    	init: function (opts) {
    		$.extend(this, opts);
    		this.make();
    		this.bind_events();
    	},
    	make: function () {
    		this.wrapper = this.frm.page.add_view("print", frappe.render_template("print_layout", {}));

    		// only system manager can edit
    		this.wrapper.find(".btn-print-edit").toggle(frappe.user.has_role("System Manager"));
    	},
    	bind_events: function () {
    		var me = this;
    		this.wrapper.find(".btn-print-close").click(function () {
    			me.frm.hide_print();
    		});

    		// hide print view on pressing escape, only if there is no focus on any input
    		$(document).on("keydown", function (e) {
    			if (e.which === 27 && me.frm && e.target === document.body) {
    				me.frm.hide_print();
    			}
    		});

    		this.print_formats = frappe.meta.get_print_formats(this.frm.meta.name);
    		this.print_letterhead = this.wrapper
    			.find(".print-letterhead")
    			.on("change", function () { me.print_sel.trigger("change"); })
    			.prop("checked", cint(
    				(frappe.model.get_doc(":Print Settings", "Print Settings")
    					|| { with_letterhead: 1 }).with_letterhead) ? true : false);
    		this.print_sel = this.wrapper
    			.find(".print-preview-select")
    			.on("change", function () {
    				me.set_default_print_language();
    				me.multilingual_preview();
    			});

    		//On selection of language get code and pass it to preview method
    		this.language_sel = this.wrapper
    			.find(".languages")
    			.on("change", function () {
    				me.lang_code = me.language_sel.val();
    				me.multilingual_preview();
    			});

    		this.wrapper.find(".btn-print-print").click(function () {
    			if (me.is_old_style()) {
    				me.print_old_style();
    			} else {
    				me.printit();
    			}
    		});

    		this.wrapper.find(".btn-print-preview").click(function () {
    			if (me.is_old_style()) {
    				me.new_page_preview_old_style();
    			} else {
    				me.new_page_preview();
    			}
    		});

    		this.wrapper.find(".btn-download-pdf").click(function () {
    			if (!me.is_old_style()) {
    				var w = window.open(
    					frappe.urllib.get_full_url("/api/method/frappe.utils.print_format.download_pdf?"
    						+ "doctype=" + encodeURIComponent(me.frm.doc.doctype)
    						+ "&name=" + encodeURIComponent(me.frm.doc.name)
    						+ "&format=" + me.selected_format()
    						+ "&no_letterhead=" + (me.with_letterhead() ? "0" : "1")
    						+ (me.lang_code ? ("&_lang=" + me.lang_code) : ""))
    				);
    				if (!w) {
    					frappe.msgprint(__("Please enable pop-ups")); return;
    				}
    			}
    		});

    		this.wrapper.find(".btn-print-edit").on("click", function () {
    			var print_format = me.get_print_format();
    			if (print_format && print_format.name) {
    				if (print_format.print_format_builder) {
    					frappe.set_route("print-format-builder", print_format.name);
    				} else {
    					frappe.set_route("Form", "Print Format", print_format.name);
    				}
    			} else {
    				// start a new print format
    				frappe.prompt({
    					fieldname: "print_format_name", fieldtype: "Data", reqd: 1,
    					label: "New Print Format Name"
    				}, function (data) {
    					frappe.route_options = {
    						make_new: true,
    						doctype: me.frm.doctype,
    						name: data.print_format_name
    					};
    					frappe.set_route("print-format-builder");
    				}, __("New Custom Print Format"), __("Start"));
    			}
    		});
    	},
    	set_user_lang: function () {
    		this.lang_code = this.frm.doc.language;
    		// Load all languages in the field
    		this.language_sel.empty()
    			.add_options([{value:'', label:__("Select Language...")}]
    				.concat(frappe.get_languages()))
    			.val(this.lang_code);
    		this.preview();
    	},
    	set_default_print_language: function () {
     		var print_format = this.get_print_format();

     		if (print_format.default_print_language) {
     			this.lang_code = print_format.default_print_language;
     			this.language_sel.val(this.lang_code);
     		} else {
    			this.language_sel.val(frappe.boot.lang);
    		}
     	},
    	multilingual_preview: function () {
    		var me = this;
    		if (this.is_old_style()) {
    			me.wrapper.find(".btn-download-pdf").toggle(false);
    			me.set_style();
    			me.preview_old_style();
    		} else {
    			me.wrapper.find(".btn-download-pdf").toggle(true);
    			me.preview();
    		}
    	},
    	preview: function () {
    		var me = this;
    		this.get_print_html(function (out) {
    			me.wrapper.find(".print-format").html(out.html);
    			me.show_footer();
    			me.set_style(out.style);
    		});
    	},
    	show_footer: function() {
    		// footer is hidden by default as reqd by pdf generation
    		// simple hack to show it in print preview
    		this.wrapper.find('.page-break').css({
    			'display': 'flex',
    			'flex-direction': 'column'
    		});
    		this.wrapper.find('#footer-html').attr('style', "\n\t\t\tdisplay: block !important;\n\t\t\torder: 1;\n\t\t\tmargin-top: 20px;\n\t\t");
    	},
    	printit: function () {
    		var me = this;
    		frappe.call({
    			method: "frappe.printing.doctype.print_settings.print_settings.is_print_server_enabled",
    			callback: function (data) {
    				if (data.message) {
    					frappe.call({
    						"method": "frappe.utils.print_format.print_by_server",
    						args: {
    							doctype: me.frm.doc.doctype,
    							name: me.frm.doc.name,
    							print_format:  me.selected_format(),
    							no_letterhead: me.with_letterhead()
    						},
    						callback: function (data) {
    						}
    					});
    				} else {
    					me.new_page_preview(true);
    				}
    			}
    		});
    	},
    	new_page_preview: function (printit) {
    		var me = this;
    		var w = window.open(frappe.urllib.get_full_url("/printview?"
    			+ "doctype=" + encodeURIComponent(me.frm.doc.doctype)
    			+ "&name=" + encodeURIComponent(me.frm.doc.name)
    			+ (printit ? "&trigger_print=1" : "")
    			+ "&format=" + me.selected_format()
    			+ "&no_letterhead=" + (me.with_letterhead() ? "0" : "1")
    			+ (me.lang_code ? ("&_lang=" + me.lang_code) : "")));
    		if (!w) {
    			frappe.msgprint(__("Please enable pop-ups")); return;
    		}
    	},
    	get_print_html: function (callback) {
    		frappe.call({
    			method: "frappe.www.printview.get_html_and_style",
    			args: {
    				doc: this.frm.doc,
    				print_format: this.selected_format(),
    				no_letterhead: !this.with_letterhead() ? 1 : 0,
    				_lang: this.lang_code
    			},
    			callback: function (r) {
    				if (!r.exc) {
    					callback(r.message);
    				}
    			}
    		});
    	},
    	preview_old_style: function () {
    		var me = this;
    		this.with_old_style({
    			format: me.print_sel.val(),
    			callback: function (html) {
    				me.wrapper.find(".print-format").html('<div class="alert alert-warning">'
    					+ __("Warning: This Print Format is in old style and cannot be generated via the API.")
    					+ '</div>'
    					+ html);
    			},
    			no_letterhead: !this.with_letterhead(),
    			only_body: true,
    			no_heading: true
    		});
    	},
    	refresh_print_options: function () {
    		this.print_formats = frappe.meta.get_print_formats(this.frm.doctype);
    		return this.print_sel
    			.empty().add_options(this.print_formats);

    	},
    	with_old_style: function (opts) {
    		frappe.require("/assets/js/print_format_v3.min.js", function () {
    			_p.build(opts.format, opts.callback, opts.no_letterhead, opts.only_body, opts.no_heading);
    		});
    	},
    	print_old_style: function () {
    		var me = this;
    		frappe.require("/assets/js/print_format_v3.min.js", function () {
    			_p.build(me.print_sel.val(), _p.go,
    				!me.with_letterhead());
    		});
    	},
    	new_page_preview_old_style: function () {
    		var me = this;
    		frappe.require("/assets/js/print_format_v3.min.js", function () {
    			_p.build(me.print_sel.val(), _p.preview, !me.with_letterhead());
    		});
    	},
    	selected_format: function () {
    		return this.print_sel.val() || this.frm.meta.default_print_format || "Standard";
    	},
    	is_old_style: function (format) {
    		return this.get_print_format(format).print_format_type === "Client";
    	},
    	get_print_format: function (format) {
    		if (!format) {
    			format = this.selected_format();
    		}

    		if (locals["Print Format"] && locals["Print Format"][format]) {
    			return locals["Print Format"][format]
    		} else {
    			return {}
    		}
    	},
    	with_letterhead: function () {
    		return this.print_letterhead.is(":checked") ? 1 : 0;
    	},
    	set_style: function (style) {
    		frappe.dom.set_style(style || frappe.boot.print_css, "print-style");
    	}
    });

    frappe.ui.get_print_settings = function (pdf, callback, letter_head) {
    	var print_settings = locals[":Print Settings"]["Print Settings"];

    	var default_letter_head = locals[":Company"] && frappe.defaults.get_default('company')
    		? locals[":Company"][frappe.defaults.get_default('company')]["default_letter_head"]
    		: '';

    	var columns = [{
    		fieldtype: "Check",
    		fieldname: "with_letter_head",
    		label: __("With Letter head")
    	}, {
    		fieldtype: "Select",
    		fieldname: "letter_head",
    		label: __("Letter Head"),
    		depends_on: "with_letter_head",
    		options: $.map(frappe.boot.letter_heads, function (i, d) { return d }),
    		default: letter_head || default_letter_head
    	}, {
    		fieldtype: "Select",
    		fieldname: "orientation",
    		label: __("Orientation"),
    		options: "Landscape\nPortrait",
    		default: "Landscape"
    	}];

    	frappe.prompt(columns, function (data) {
    		var data = $.extend(print_settings, data);
    		if (!data.with_letter_head) {
    			data.letter_head = null;
    		}
    		if (data.letter_head) {
    			data.letter_head = frappe.boot.letter_heads[print_settings.letter_head];
    		}
    		callback(data);
    	}, __("Print Settings"));
    };

    frappe.provide("frappe.ui.form");
    frappe.ui.form.Sidebar = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    	},

    	make: function() {
    		var sidebar_content = frappe.render_template("form_sidebar", {doctype: this.frm.doctype, frm:this.frm});

    		this.sidebar = $('<div class="form-sidebar overlay-sidebar hidden-xs hidden-sm"></div>')
    			.html(sidebar_content)
    			.appendTo(this.page.sidebar.empty());

    		this.ratings = this.sidebar.find(".sidebar-rating");
    		this.comments = this.sidebar.find(".sidebar-comments");
    		this.user_actions = this.sidebar.find(".user-actions");
    		this.image_section = this.sidebar.find(".sidebar-image-section");
    		this.image_wrapper = this.image_section.find('.sidebar-image-wrapper');

    		this.make_assignments();
    		this.make_attachments();
    		this.make_shared();
    		this.make_viewers();
    		this.make_tags();
    		this.make_like();

    		this.bind_events();
    		frappe.ui.form.setup_user_image_event(this.frm);

    		this.refresh();

    	},

    	bind_events: function() {
    		var me = this;

    		// scroll to comments
    		this.comments.on("click", function() {
    			frappe.utils.scroll_to(me.frm.footer.wrapper.find(".form-comments"), true);
    		});

    		this.like_icon.on("click", function() {
    			frappe.ui.toggle_like(me.like_icon, me.frm.doctype, me.frm.doc.name, function() {
    				me.refresh_like();
    			});
    		});
    	},

    	refresh: function() {
    		if(this.frm.doc.__islocal) {
    			this.sidebar.toggle(false);
    		} else {
    			this.sidebar.toggle(true);
    			this.frm.assign_to.refresh();
    			this.frm.attachments.refresh();
    			this.frm.shared.refresh();
    			this.frm.viewers.refresh();
    			this.frm.tags && this.frm.tags.refresh(this.frm.doc._user_tags);
    			this.sidebar.find(".modified-by").html(__("{0} edited this {1}",
    				["<strong>" + frappe.user.full_name(this.frm.doc.modified_by) + "</strong>",
    					"<br>" + comment_when(this.frm.doc.modified)]));
    			this.sidebar.find(".created-by").html(__("{0} created this {1}",
    				["<strong>" + frappe.user.full_name(this.frm.doc.owner) + "</strong>",
    					"<br>" + comment_when(this.frm.doc.creation)]));

    			this.refresh_like();
    			this.setup_ratings();
    			frappe.ui.form.set_user_image(this.frm);
    		}
    	},

    	refresh_comments: function() {
    		$.map(this.frm.timeline.get_communications(), function(c) {
    			return (c.communication_type==="Communication" || (c.communication_type=="Comment" && c.comment_type==="Comment")) ? c : null;
    		});
    		this.comments.find(".n-comments").html(this.frm.get_docinfo().total_comments);
    	},

    	make_tags: function() {
    		var me = this;
    		if (this.frm.meta.issingle) {
    			this.sidebar.find(".form-tags").toggle(false);
    			return;
    		}

    		this.frm.tags = new frappe.ui.TagEditor({
    			parent: this.sidebar.find(".tag-area"),
    			frm: this.frm,
    			on_change: function(user_tags) {
    				me.frm.doc._user_tags = user_tags;
    			}
    		});
    	},
    	make_attachments: function() {
    		var me = this;
    		this.frm.attachments = new frappe.ui.form.Attachments({
    			parent: me.sidebar.find(".form-attachments"),
    			frm: me.frm
    		});
    	},
    	make_assignments: function() {
    		this.frm.assign_to = new frappe.ui.form.AssignTo({
    			parent: this.sidebar.find(".form-assignments"),
    			frm: this.frm
    		});
    	},
    	make_shared: function() {
    		this.frm.shared = new frappe.ui.form.Share({
    			frm: this.frm,
    			parent: this.sidebar.find(".form-shared")
    		});
    	},
    	make_viewers: function() {
    		this.frm.viewers = new frappe.ui.form.Viewers({
    			frm: this.frm,
    			parent: this.sidebar.find(".form-viewers")
    		});
    	},
    	add_user_action: function(label, click) {
    		return $('<a>').html(label).appendTo($('<li class="user-action-row">')
    			.appendTo(this.user_actions.removeClass("hidden"))).on("click", click);
    	},
    	clear_user_actions: function() {
    		this.user_actions.addClass("hidden");
    		this.user_actions.find(".user-action-row").remove();
    	},

    	make_like: function() {
    		this.like_wrapper = this.sidebar.find(".liked-by");
    		this.like_icon = this.sidebar.find(".liked-by .octicon-heart");
    		this.like_count = this.sidebar.find(".liked-by .likes-count");
    		frappe.ui.setup_like_popover(this.sidebar.find(".liked-by-parent"), ".liked-by");
    	},

    	refresh_like: function() {
    		if (!this.like_icon) {
    			return;
    		}

    		this.like_wrapper.attr("data-liked-by", this.frm.doc._liked_by);

    		this.like_icon.toggleClass("text-extra-muted not-liked",
    			!frappe.ui.is_liked(this.frm.doc))
    			.attr("data-doctype", this.frm.doctype)
    			.attr("data-name", this.frm.doc.name);

    		this.like_count.text(JSON.parse(this.frm.doc._liked_by || "[]").length);
    	},

    	refresh_image: function() {
    	},

    	setup_ratings: function() {
    		var _ratings = this.frm.get_docinfo().rating || 0;

    		if(_ratings) {
    			this.ratings.removeClass("hide");
    			var rating_icons = frappe.render_template("rating_icons", {rating: _ratings, show_label: false});
    			this.ratings.find(".rating-icons").html(rating_icons);
    		}
    	}
    });

    frappe.ui.form.set_user_image = function(frm) {

    	var image_section = frm.sidebar.image_section;
    	var image_field = frm.meta.image_field;
    	var image = frm.doc[image_field];
    	var title_image = frm.page.$title_area.find('.title-image');


    	image_section.toggleClass('hide', image_field ? false : true);
    	title_image.toggleClass('hide', image_field ? false : true);

    	if(!image_field) {
    		return;
    	}

    	// if image field has value
    	if (image) {
    		image = (window.cordova && image.indexOf('http')===-1) ?
    			frappe.base_url + image : image;

    		image_section
    			.find(".sidebar-image")
    			.css("background-image", 'url("' + image + '")')
    			.removeClass("hide");

    		image_section
    			.find('.sidebar-standard-image')
    			.addClass('hide');

    		title_image
    			.css('background-color', '')
    			.css("background-image", 'url("' + image + '")')
    			.html('');

    	} else {
    		image_section
    			.find(".sidebar-image")
    			.css("background-image", null)
    			.addClass("hide");

    		var title = frm.get_title();

    		image_section
    			.find('.sidebar-standard-image')
    			.removeClass('hide')
    			.find('.standard-image')
    			.css({'background-color': frappe.get_palette(title)})
    			.html(frappe.get_abbr(title));

    		title_image.css("background-image", '')
    			.css({'background-color': frappe.get_palette(title)})
    			.html(frappe.get_abbr(title));

    	}

    };

    frappe.ui.form.setup_user_image_event = function(frm) {
    	// re-draw image on change of user image
    	if(frm.meta.image_field) {
    		frappe.ui.form.on(frm.doctype, frm.meta.image_field, function(frm) {
    			frappe.ui.form.set_user_image(frm);
    		});
    	}

    	// bind click on image_wrapper
    	frm.sidebar.image_wrapper.on('click', function() {
    		var field = frm.get_field(frm.meta.image_field);
    		if(!field.$input) {
    			field.make_input();
    		}
    		field.$input.trigger('click');
    	});
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");

    frappe.ui.form.Share = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    	},
    	refresh: function() {
    		this.render_sidebar();
    	},
    	render_sidebar: function() {
    		var me = this;
    		this.parent.empty();

    		var shared = this.shared || this.frm.get_docinfo().shared;
    		shared = shared.filter(function(d) { return d });
    		var users = [];
    		for (var i=0, l=shared.length; i < l; i++) {
    			var s = shared[i];

    			if (s.everyone) {
    				users.push({
    					icon: "octicon octicon-megaphone text-muted",
    					avatar_class: "avatar-empty share-doc-btn shared-with-everyone",
    					title: __("Shared with everyone")
    				});
    			} else {
    				var user_info = frappe.user_info(s.user);
    				users.push({
    					image: user_info.image,
    					fullname: user_info.fullname,
    					abbr: user_info.abbr,
    					color: user_info.color,
    					title: __("Shared with {0}", [user_info.fullname])
    				});
    			}
    		}

    		if (!me.frm.doc.__islocal) {
    			users.push({
    				icon: "octicon octicon-plus text-muted",
    				avatar_class: "avatar-empty share-doc-btn",
    				title: __("Share")
    			});
    		}

    		this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
    		this.parent.find(".avatar").on("click", function() {
    			me.frm.share_doc();
    		});
    	},
    	show: function() {
    		var me = this;
    		var d = new frappe.ui.Dialog({
    			title: __("Share {0} with", [this.frm.doc.name]),
    		});

    		this.dialog = d;
    		this.dirty = false;

    		frappe.call({
    			method: "frappe.share.get_users",
    			args: {
    				doctype: this.frm.doctype,
    				name: this.frm.doc.name
    			},
    			callback: function(r) {
    				me.render_shared(r.message || []);
    			}
    		});

    		$(d.body).html('<p class="text-muted">' + __("Loading...") + '</p>');

    		d.onhide = function() {
    			// reload comments
    			if(me.dirty) { me.frm.reload_docinfo(); }
    		};

    		d.show();
    	},
    	render_shared: function(shared) {
    		if(shared)
    			{ this.shared = shared; }
    		var d = this.dialog;
    		$(d.body).empty();

    		var everyone = {};
    		$.each(this.shared, function(i, s) {
    			// pullout everyone record from shared list
    			if (s && s.everyone) {
    				everyone = s;
    			}
    		});

    		$(frappe.render_template("set_sharing", {frm: this.frm, shared: this.shared, everyone: everyone}))
    			.appendTo(d.body);

    		if(frappe.model.can_share(null, this.frm)) {
    			this.make_user_input();
    			this.add_share_button();
    			this.set_edit_share_events();
    		} else {
    			// if cannot share, disable sharing settings.
    			$(d.body).find(".edit-share").prop("disabled", true);
    		}
    	},
    	make_user_input: function() {
    		// make add-user input
    		this.dialog.share_with = frappe.ui.form.make_control({
    			parent: $(this.dialog.body).find(".input-wrapper-add-share"),
    			df: {
    				fieldtype: "Link",
    				label: __("Share With"),
    				fieldname: "share_with",
    				options: "User",
    				filters: {
    					"user_type": "System User",
    					"name": ["!=", frappe.session.user]
    				}
    			},
    			only_input: true,
    			render_input: true
    		});

    	},
    	add_share_button: function() {
    		var me = this, d = this.dialog;
    		$(d.body).find(".btn-add-share").on("click", function() {
    			var user = d.share_with.get_value();
    			if(!user) {
    				return;
    			}
    			frappe.call({
    				method: "frappe.share.add",
    				args: {
    					doctype: me.frm.doctype,
    					name: me.frm.doc.name,
    					user: user,
    					read: $(d.body).find(".add-share-read").prop("checked") ? 1 : 0,
    					write: $(d.body).find(".add-share-write").prop("checked") ? 1 : 0,
    					share: $(d.body).find(".add-share-share").prop("checked") ? 1 : 0,
    					notify: $(d.body).find(".add-share-notify").prop("checked") ? 1 : 0
    				},
    				btn: this,
    				callback: function(r) {
    					$.each(me.shared, function(i, s) {
    						if(s && s.user===r.message.user) {
    							// re-adding / remove the old share rule.
    							delete me.shared[i];
    						}
    					});
    					me.dirty = true;
    					me.shared.push(r.message);
    					me.render_shared();
    					me.frm.shared.refresh();
    				}
    			});
    		});
    	},
    	set_edit_share_events: function() {
    		var me = this, d = this.dialog;
    		$(d.body).find(".edit-share").on("click", function() {
    			var user = $(this).parents(".shared-user:first").attr("data-user") || "",
    				value = $(this).prop("checked") ? 1 : 0,
    				property = $(this).attr("name"),
    				everyone = cint($(this).parents(".shared-user:first").attr("data-everyone"));

    			frappe.call({
    				method: "frappe.share.set_permission",
    				args: {
    					doctype: me.frm.doctype,
    					name: me.frm.doc.name,
    					user: user,
    					permission_to: property,
    					value: value,
    					everyone: everyone
    				},
    				callback: function(r) {
    					var found = null;
    					$.each(me.shared, function(i, s) {
    						// update shared object
    						if(s && (s.user===user || (everyone && s.everyone===1))) {
    							if(!r.message) {
    								delete me.shared[i];
    							} else {
    								me.shared[i] = $.extend(s, r.message);
    							}
    							found = true;
    							return false;
    						}
    					});

    					if (!found) {
    						me.shared.push(r.message);
    					}

    					me.dirty = true;
    					me.render_shared();
    					me.frm.shared.refresh();
    				}
    			});
    		});
    	},
    });

    frappe.provide("frappe.ui.form");

    frappe.ui.form.Viewers = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    	},
    	get_viewers: function() {
    		var docinfo = this.frm.get_docinfo();
    		if (docinfo) {
    			return docinfo.viewers || {};
    		} else {
    			return {};
    		}
    	},
    	refresh: function(data_updated) {
    		this.parent.empty();

    		var viewers = this.get_viewers();

    		var users = [];
    		var new_users = [];
    		for (var i=0, l=(viewers.current || []).length; i < l; i++) {
    			var username = viewers.current[i];
    			if (username===frappe.session.user) {
    				// current user
    				continue;
    			}

    			var user_info = frappe.user_info(username);
    			users.push({
    				image: user_info.image,
    				fullname: user_info.fullname,
    				abbr: user_info.abbr,
    				color: user_info.color,
    				title: __("{0} is currently viewing this document", [user_info.fullname])
    			});

    			if (viewers.new.indexOf(username)!==-1) {
    				new_users.push(user_info.fullname);
    			}
    		}

    		if (users.length) {
    			this.parent.parent().removeClass("hidden");
    			this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
    		} else {
    			this.parent.parent().addClass("hidden");
    		}

    		if (data_updated && new_users.length) {
    			// new user viewing this document, who wasn't viewing in the past
    			if (new_users.length===1) {
    				frappe.show_alert(__("{0} is currently viewing this document", [new_users[0]]));
    			} else {
    				frappe.show_alert(__("{0} are currently viewing this document", [frappe.utils.comma_and(new_users)]));
    			}

    		}
    	}
    });

    frappe.ui.form.set_viewers = function(data) {
    	var doctype = data.doctype;
    	var docname = data.docname;
    	var docinfo = frappe.model.get_docinfo(doctype, docname);
    	var past_viewers = ((docinfo && docinfo.viewers) || {}).past || [];
    	var viewers = data.viewers || [];

    	var new_viewers = viewers.filter(function (viewer) { return !past_viewers.includes(viewer); });

    	frappe.model.set_docinfo(doctype, docname, "viewers", {
    		past: past_viewers.concat(new_viewers),
    		new: new_viewers,
    		current: viewers
    	});

    	if (cur_frm && cur_frm.doc && cur_frm.doc.doctype===doctype && cur_frm.doc.name==docname) {
    		cur_frm.viewers.refresh(true);
    	}
    };

    frappe.templates['attachment'] = '<li class="attachment-row">  <a class="close">&times;</a>  <a href="{{ file_path }}">   <i class="{{ icon }} fa-fw text-warning"></i>  </a>  <a href="{{ file_url }}" target="_blank" title="{{ file_name }}" class="ellipsis" style="max-width: calc(100% - 43px);">   <span>{{ file_name }}</span>  </a> </li>  ';

    frappe.templates['form_footer'] = '<div class="form-footer">  <div class="after-save">   <div class="form-comments"></div>  </div>  <div class="pull-right scroll-to-top">   <a onclick="frappe.utils.scroll_to(0)"><i class="fa fa-chevron-up text-muted"></i></a>  </div> </div> ';

    frappe.templates['timeline'] = '<div class="timeline">  <div class="timeline-head">  </div>  <div class="timeline-new-email">   {% if (doctype === "Communication") { %}    <button class="btn btn-default btn-reply-email btn-xs">     {%= __("Reply") %}    </button>   {% } else { %}    <button class="btn btn-default btn-new-email btn-xs">    {%= __("New Email") %}    </button>    {% if (allow_events_in_timeline===1) { %}    <button class="btn btn-default btn-new-interaction btn-xs">     {%= __("New Event") %}    </button>    {% } %}   {% } %}  </div>     <div class="timeline-items">      </div> </div> ';

    frappe.templates['timeline_item'] = '<div class="media timeline-item {% if (data.user_content) { %} user-content {% } else { %} notification-content {% } %}" data-doctype="{{ data.doctype }}" data-name="{%= data.name %}" data-communication-type = "{{ data.communication_type }}">  {% if (data.user_content) { %}  <span class="pull-left avatar avatar-medium hidden-xs" style="margin-top: 1px">   {% if(data.user_info.image) { %}   <div class="avatar-frame" style="background-image: url(\'{%= data.user_info.image %}\')"></div>   {% } else { %}   <div class="standard-image" style="background-color: {{ data.user_info.color }}">    {{ data.user_info.abbr }}</div>   {% } %}  </span>  {% } %}   <div class="pull-left media-body">   <div class="media-content-wrapper">    <div class="action-btns">     {% if(data.delete) { %}     <div class="pull-right hidden-xs close-btn-container">      <span class="small text-muted">       {%= data.delete %}      </span>     </div>     {% } %}     {% if(data.edit) { %}     <div class="pull-right edit-btn-container">      <span class="small text-muted">       {%= data.edit %}      </span>     </div>     {% } %}    </div>    {% if(data.communication_type==="Communication"     || data.communication_type==="Feedback"     || (data.communication_type==="Comment"      && data.comment_type==="Comment")) { %}    <div class="comment-header clearfix small {% if (data.edit || data.delete) { %} links-active {% } %}">     <span class="pull-left avatar avatar-small visible-xs">      {% if(data.user_info.image) { %}      <div class="avatar-frame" style="background-image: url(\'{%= data.user_info.image %}\')"></div>      {% } else { %}      <div class="standard-image" style="background-color: {{ data.user_info.color }}">       {{ data.user_info.abbr }}</div>      {% } %}     </span>     <div class="asset-details" data-communication-type = "{{ data.communication_type }}">      <span class="author-wrap">       <i class="{%= data.icon %} hidden-xs fa-fw"></i>       <span title="{%= data.comment_by %}">{%= data.fullname %}</span>      </span>      <span>       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        &ndash;        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}" class="text-muted">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>       {% } %}      </span>       {% if(in_list(["Communication", "Feedback"], data.communication_type)) { %}        {% if (frappe.model.can_read(\'Communication\')) { %}        <a href="#Form/Communication/{%= data.name %}"         class="text-muted">        {% } %}         {% if (data.delivery_status) {         if (in_list(["Sent", "Clicked"], data.delivery_status)) {          var indicator_class = "green";         } else if (data.delivery_status === "Sending") {          var indicator_class = "orange";         } else if (in_list(["Opened", "Read"], data.delivery_status)) {          var indicator_class = "blue";         } else {          var indicator_class = "red";         }        %}        <span class="text-muted hidden-xs">&ndash;</span>        <span class="indicator-right {%= indicator_class %}         delivery-status-indicator"         title="{%= data.delivery_status %}"><span class="hidden-xs">         {%= data.delivery_status %}</span></span>         {% } else { %}         {% if (frappe.model.can_read(\'Communication\')) { %}         <span class="text-muted n-dash">&ndash;</span>         {%= __("Details") %}         {% } %}        {% } %}         {% if (frappe.model.can_read(\'Communication\')) { %}        </a>        {% } %}         {% if (data.communication_medium === "Email"         && data.sender !== frappe.session.user_email) { %}        <a class="text-muted reply-link pull-right timeline-content-show"         data-name="{%= data.name %}" title="{%= __("Reply") %}">{%= __("Reply") %}</a>        {% } %}       {% } %}      <span class="text-muted commented-on hidden-xs {% if (data.futur_date) { %}timeline-futur{% } %}">       &ndash; {%= data.comment_on %}</span>      <span class="text-muted commented-on-small {% if (data.futur_date) { %}timeline-futur{% } %}">       &ndash; {%= data.comment_on_small %}</span>      <span class="comment-likes hidden-xs"       data-liked-by=\'{{ JSON.stringify(data._liked_by) }}\'>       <i class="octicon octicon-heart like-action        {% if (!data.liked_by_user) { %}         text-extra-muted not-liked        {% } %} fa-fw"        data-doctype="{%= data.doctype %}"        data-name="{%= data.name %}"></i>       <span class="likes-count text-muted">        {{ (data._liked_by || []).length }}</span>      </span>     </div>    </div>    <div class="reply timeline-content-show">     <div class="timeline-item-content">      {% if data.show_subject %}       <p class="text-muted small">        <b>{{ __("Title") }}:</b> {{ data.subject }}</p>       <hr>      {% endif %}       {% if data.communication_type == "Feedback" && data.rating_icons %}       <p class="text-muted small">{{ data.rating_icons }}</p>       <hr>      {% endif %}       {%= data.content_html %}     </div>     <div class="timeline-item-edit"></div>     {% if(data.attachments && data.attachments.length) { %}     <div style="margin: 10px 0px">      {% $.each(data.attachments, function(i, a) { %}      <div class="ellipsis">       <a href="{%= encodeURI(a.file_url).replace(/#/g, \'%23\') %}"        class="text-muted small" target="_blank" rel="noopener noreferrer">        <i class="fa fa-paperclip"></i>        {%= a.file_url.split("/").slice(-1)[0] %}        {% if (a.is_private) { %}        <i class="fa fa-lock text-warning"></i>        {% } %}       </a>      </div>      {% }); %}     </div>     {% } %}    </div>     {% } else if(in_list(["Assignment Completed", "Assigned", "Shared",     "Unshared"], data.comment_type)) { %}     <div class="small">      <i class="{%= data.icon %} fa-fw"></i>       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>        &ndash;       {% } %}       {% if(data.link_doctype && data.link_name) { %}       <a href="#Form/{%= data.link_doctype %}/{%= data.link_name %}">       {% } %}        {%= __(data.content) %}       {% if(data.link_doctype && data.link_name) { %}       </a>       {% } %}       <span class="text-muted commented-on" style="font-weight: normal;">       &ndash; {%= data.comment_on %}</span>     </div>    {% } else { %}     <div class="small">      <i class="{%= data.icon %} fa-fw"></i>      {% if (data.comment_type == "Like") { %}      <span title="{%= data.comment_by %}">       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a> &ndash;       {% } %}       {%= __("Liked by {0}", [data.fullname]) %}      </span>      {% } else { %}       <b title="{{ data.comment_by }}">{%= data.fullname %}</b>       {%= __(data.content) %}       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}         &ndash;         <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>       {% } %}      {% } %}      <span class="text-muted commented-on" style="font-weight: normal;">      &ndash; {%= data.comment_on %}</span>     </div>    {% } %}   </div>  </div> </div> ';

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.ui.form.Footer = Class.extend({
    	init: function(opts) {
    		var me = this;
    		$.extend(this, opts);
    		this.make();
    		this.make_comments();
    		// render-complete
    		$(this.frm.wrapper).on("render_complete", function() {
    			me.refresh();
    		});
    	},
    	make: function() {
    		var me = this;
    		this.wrapper = $(frappe.render_template("form_footer", {}))
    			.appendTo(this.parent);
    		this.wrapper.find(".btn-save").click(function() {
    			me.frm.save('Save', null, this);
    		});

    	},
    	make_comments: function() {
    		this.frm.timeline = new frappe.ui.form.Timeline({
    			parent: this.wrapper.find(".form-comments"),
    			frm: this.frm
    		});
    	},
    	refresh: function() {
    		if(this.frm.doc.__islocal) {
    			this.parent.addClass("hide");
    		} else {
    			this.parent.removeClass("hide");
    			this.frm.timeline.refresh();
    		}
    	},
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");

    frappe.ui.form.Attachments = Class.extend({
    	init: function(opts) {
    		$.extend(this, opts);
    		this.make();
    	},
    	make: function() {
    		var me = this;
    		this.parent.find(".add-attachment").click(function() {
    			me.new_attachment();
    		});
    		this.add_attachment_wrapper = this.parent.find(".add_attachment").parent();
    		this.attachments_label = this.parent.find(".attachments-label");
    	},
    	max_reached: function() {
    		// no of attachments
    		var n = Object.keys(this.get_attachments()).length;

    		// button if the number of attachments is less than max
    		if(n < this.frm.meta.max_attachments || !this.frm.meta.max_attachments) {
    			return false;
    		}
    		return true;
    	},
    	refresh: function() {
    		var me = this;

    		if(this.frm.doc.__islocal) {
    			this.parent.toggle(false);
    			return;
    		}
    		this.parent.toggle(true);
    		this.parent.find(".attachment-row").remove();

    		var max_reached = this.max_reached();
    		this.add_attachment_wrapper.toggleClass("hide", !max_reached);

    		// add attachment objects
    		var attachments = this.get_attachments();
    		if(attachments.length) {
    			attachments.forEach(function(attachment) {
    				me.add_attachment(attachment);
    			});
    		} else {
    			this.attachments_label.removeClass("has-attachments");
    		}

    	},
    	get_attachments: function() {
    		return this.frm.get_docinfo().attachments;
    	},
    	add_attachment: function(attachment) {
    		var file_name = attachment.file_name;
    		var file_url = this.get_file_url(attachment);
    		var fileid = attachment.name;
    		if (!file_name) {
    			file_name = file_url;
    		}

    		var me = this;

    		var $attach = $(frappe.render_template("attachment", { 
    			"file_path": "/desk#Form/File/" + fileid,
    			"icon": attachment.is_private ? "fa fa-lock" : "fa fa-unlock-alt",
    			"file_name": file_name,
    			"file_url": frappe.urllib.get_full_url(file_url)
    		})).insertAfter(this.attachments_label.addClass("has-attachments"));			

    		var $close =
    			$attach.find(".close")
    			.data("fileid", fileid)
    			.click(function() {
    				var remove_btn = this;
    				frappe.confirm(__("Are you sure you want to delete the attachment?"),
    					function() {
    						me.remove_attachment($(remove_btn).data("fileid"));
    					}
    				);
    				return false
    			});

    		if(!frappe.model.can_write(this.frm.doctype, this.frm.name)) {
    			$close.remove();
    		}
    	},
    	get_file_url: function(attachment) {
    		var file_url = attachment.file_url;
    		if (!file_url) {
    			if (attachment.file_name.indexOf('files/') === 0) {
    				file_url = '/' + attachment.file_name;
    			}
    			else {
    				file_url = '/files/' + attachment.file_name;
    			}
    		}
    		// hash is not escaped, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
    		return encodeURI(file_url).replace(/#/g, '%23');
    	},
    	get_file_id_from_file_url: function(file_url) {
    		var fid;
    		$.each(this.get_attachments(), function(i, attachment) {
    			if (attachment.file_url === file_url) {
    				fid = attachment.name;
    				return false;
    			}
    		});
    		return fid;
    	},
    	remove_attachment_by_filename: function(filename, callback) {
    		this.remove_attachment(this.get_file_id_from_file_url(filename), callback);
    	},
    	remove_attachment: function(fileid, callback) {
    		if (!fileid) {
    			if (callback) { callback(); }
    			return;
    		}

    		var me = this;
    		return frappe.call({
    			method: 'frappe.desk.form.utils.remove_attach',
    			args: {
    				fid: fileid,
    				dt: me.frm.doctype,
    				dn: me.frm.docname
    			},
    			callback: function(r,rt) {
    				if(r.exc) {
    					if(!r._server_messages)
    						{ frappe.msgprint(__("There were errors")); }
    					return;
    				}
    				me.remove_fileid(fileid);
    				me.frm.get_docinfo().communications.push(r.message);
    				me.frm.timeline && me.frm.timeline.refresh();
    				if (callback) { callback(); }
    			}
    		});
    	},
    	new_attachment: function(fieldname) {
    		var me = this;
    		if (this.dialog) {
    			// remove upload dialog
    			this.dialog.$wrapper.remove();
    		}

    		// make upload dialog
    		this.dialog = frappe.ui.get_upload_dialog({
    			"args": me.get_args(),
    			"callback": function(attachment, r) { me.attachment_uploaded(attachment, r); },
    			"max_width": me.frm.cscript ? me.frm.cscript.attachment_max_width : null,
    			"max_height": me.frm.cscript ? me.frm.cscript.attachment_max_height : null
    		});
    	},
    	get_args: function() {
    		return {
    			from_form: 1,
    			doctype: this.frm.doctype,
    			docname: this.frm.docname,
    		}
    	},
    	attachment_uploaded:  function(attachment, r) {
    		this.dialog && this.dialog.hide();
    		this.update_attachment(attachment, r.message.comment);

    		if(this.fieldname) {
    			this.frm.set_value(this.fieldname, attachment.file_url);
    		}
    	},
    	update_attachment: function(attachment, comment) {
    		if(attachment.name) {
    			this.add_to_attachments(attachment);
    			this.refresh();
    			if(comment) {
    				this.frm.get_docinfo().communications.push(comment);
    				this.frm.timeline.refresh();
    			}
    		}
    	},
    	add_to_attachments: function (attachment) {
    		var form_attachments = this.get_attachments();
    		for(var i in form_attachments) {
    			// prevent duplicate
    			if(form_attachments[i]["name"] === attachment.name) { return; }
    		}
    		form_attachments.push(attachment);
    	},
    	remove_fileid: function(fileid) {
    		var attachments = this.get_attachments();
    		var new_attachments = [];
    		$.each(attachments, function(i, attachment) {
    			if(attachment.name!=fileid) {
    				new_attachments.push(attachment);
    			}
    		});
    		this.frm.get_docinfo().attachments = new_attachments;
    		this.refresh();
    	}
    });

    frappe.ui.get_upload_dialog = function(opts){
    	var dialog = new frappe.ui.Dialog({
    		title: __('Upload Attachment'),
    		no_focus: true,
    		fields: [
    			{
    				"fieldtype": "Section Break"
    			},
    			{
    				"fieldtype": "Link" ,
    				"fieldname": "file" ,
    				"label": __("Select uploaded file"),
    				"options": "File",
    				onchange: function() {
    					frappe.call({
    						'method': 'frappe.client.get_value',
    						'args': {
    							'doctype': 'File',
    							'fieldname': ['file_url','file_name','is_private'],
    							'filters': {
    								'name': dialog.get_value("file")
    							}
    						},
    						callback: function(r){
    							if(!r.message) {
    								dialog.$wrapper.find('[name="file_url"]').val("");
    								return;
    							}
    							dialog.$wrapper.find('[name="file_url"]').val(r.message.file_url);
    							dialog.$wrapper.find('.private-file input').prop('checked', r.message.is_private);
    							opts.args.filename = r.message.file_name;
    							opts.args.is_private = r.message.is_private;
    						}
    					});
    				}
    			},
    			{
    				"hidden": !opts.args.doctype || !frappe.boot.gsuite_enabled,
    				"fieldtype": "Section Break",
    				"label": __("GSuite Document"),
    			},
    			{
    				"fieldtype": "Link" ,
    				"fieldname": "gs_template" ,
    				"label": __("Select template"),
    				"options": "GSuite Templates",
    				"reqd" : false,
    				"filters": {
    					'related_doctype': opts.args.doctype
    				},
    				onchange: function(){
    					opts.args.gs_template = this.get_value();
    				}
    			} ],
    	});




    	var btn = dialog.set_primary_action(__("Attach"));
    	btn.removeClass("btn-primary").addClass("btn-default");

    	dialog.show();
    	var upload_area = $('<div></div>').prependTo(dialog.body);

    	

    	frappe.upload.make({
    		parent: upload_area,
    		args: opts.args,
    		callback: function(attachment, r) {
    			dialog.hide();
    			if(opts.callback){
    				opts.callback(attachment, r);
    			}
    		},
    		on_select: function() {
    			btn.removeClass("btn-default").addClass("btn-primary");
    		},
    		onerror: function() {
    			dialog.hide();
    		},
    		btn: btn,
    		max_width: opts.max_width,
    		max_height: opts.max_height,
    	});

    	return dialog;
    };

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide('frappe.timeline');
    frappe.separator_element = '<div>---</div>';

    frappe.ui.form.Timeline = class Timeline {
    	constructor(opts) {
    		$.extend(this, opts);
    		this.make();
    	}

    	make() {
    		var this$1 = this;

    		var me = this;
    		this.wrapper = $(frappe.render_template("timeline",
    			{doctype: me.frm.doctype, allow_events_in_timeline: me.frm.meta.allow_events_in_timeline})).appendTo(me.parent);

    		this.list = this.wrapper.find(".timeline-items");

    		this.comment_area = frappe.ui.form.make_control({
    			parent: this.wrapper.find('.timeline-head'),
    			df: {
    				fieldtype: 'Comment',
    				fieldname: 'comment',
    				label: 'Comment'
    			},
    			mentions: this.get_names_for_mentions(),
    			render_input: true,
    			only_input: true,
    			on_submit: function (val) {
    				val && this$1.insert_comment("Comment", val, this$1.comment_area.button);
    			}
    		});

    		this.setup_email_button();
    		this.setup_interaction_button();

    		this.list.on("click", ".toggle-blockquote", function() {
    			$(this).parent().siblings("blockquote").toggleClass("hidden");
    		});

    		this.setup_comment_like();

    		this.list.on("click", ".btn-more", function() {
    			var communications = me.get_communications();
    			frappe.call({
    				btn: this,
    				method: "frappe.desk.form.load.get_communications",
    				args: {
    					doctype: me.frm.doc.doctype,
    					name: me.frm.doc.name,
    					start: communications.length
    				},
    				callback: function(r) {
    					if (!r.exc) {
    						if (r.message) {
    							var new_communications = r.message;
    							var communications = me.get_communications().concat(new_communications);
    							frappe.model.set_docinfo(me.frm.doc.doctype, me.frm.doc.name, "communications", communications);

    							if (new_communications.length < 20) {
    								me.more = false;
    							}

    						} else {
    							me.more = false;
    						}

    						me.refresh();
    					}
    				}
    			});
    		});

    	}

    	setup_email_button() {
    		var me = this;
    		var selector = this.frm.doctype === "Communication"? ".btn-reply-email": ".btn-new-email";
    		this.email_button = this.wrapper.find(selector)
    			.on("click", function() {
    				var $btn = $(this);
    				var is_a_reply = true;
    				if ($btn.is('.btn-new-email')) {
    					is_a_reply = false;
    				}

    				var args = {
    					doc: me.frm.doc,
    					frm: me.frm,
    					recipients: me.get_recipient(),
    					is_a_reply: is_a_reply
    				};

    				if(me.frm.doctype === "Communication") {
    					$.extend(args, {
    						txt: "",
    						last_email: me.frm.doc,
    						recipients: me.frm.doc.sender,
    						subject: __("Re: {0}", [me.frm.doc.subject]),
    					});
    				} else {
    					var comment_value = frappe.markdown(me.comment_area.get_value());
    					$.extend(args, {
    						txt: strip_html(comment_value) ? comment_value : ''
    					});
    				}
    				new frappe.views.CommunicationComposer(args);
    			});
    	}

    	setup_interaction_button() {
    		var me = this;
    		var selector = ".btn-new-interaction";
    		this.activity_button = this.wrapper.find(selector)
    			.on("click", function() {
    				var args = {
    					doc: me.frm.doc,
    					frm: me.frm,
    					recipients: me.get_recipient()
    				};
    				$.extend(args, {
    					txt: frappe.markdown(me.comment_area.get_value())
    				});
    				new frappe.views.InteractionComposer(args);
    			});
    	}

    	setup_editing_area() {
    		this.$editing_area = $('<div class="timeline-editing-area">');

    		this.editing_area = new frappe.ui.CommentArea({
    			parent: this.$editing_area,
    			mentions: this.get_names_for_mentions(),
    			no_wrapper: true
    		});

    		this.editing_area.destroy();
    	}

    	refresh(scroll_to_end) {
    		var me = this;
    		this.last_type = "Comment";

    		if(this.frm.doc.__islocal) {
    			this.wrapper.toggle(false);
    			return;
    		}
    		this.wrapper.toggle(true);
    		this.list.empty();
    		this.comment_area.set_value('');
    		var communications = this.get_communications(true);
    		var views = this.get_view_logs();

    		var timeline = communications.concat(views);
    		timeline
    			.filter(function (a) { return a.content; })
    			.sort(function (b, c) { return me.compare_dates(b, c); })
    			.forEach(function (d) {
    				d.frm = me.frm;
    				me.render_timeline_item(d);
    			});



    		// more btn
    		if (this.more===undefined && timeline.length===20) {
    			this.more = true;
    		}

    		if (this.more) {
    			$('<div class="timeline-item">\
				<button class="btn btn-default btn-xs btn-more">More</button>\
			</div>').appendTo(me.list);
    		}

    		// created
    		me.render_timeline_item({
    			content: __("created"),
    			comment_type: "Created",
    			communication_type: "Comment",
    			sender: this.frm.doc.owner,
    			communication_date: this.frm.doc.creation,
    			creation: this.frm.doc.creation,
    			frm: this.frm
    		});

    		this.wrapper.find(".is-email").prop("checked", this.last_type==="Email").change();

    		this.frm.sidebar.refresh_comments();

    		this.frm.trigger('timeline_refresh');
    	}

    	compare_dates(b, c) {
    		var b_date = b.communication_date ? b.communication_date : b.creation;
    		var c_date = c.communication_date ? c.communication_date : c.creation;
    		var comparison = new Date(b_date) > new Date(c_date) ? -1 : 1;
    		return comparison;
    	}

    	make_editing_area(container) {
    		return frappe.ui.form.make_control({
    			parent: container,
    			df: {
    				fieldtype: 'Comment',
    				fieldname: 'comment',
    				label: 'Comment'
    			},
    			mentions: this.get_names_for_mentions(),
    			render_input: true,
    			only_input: true,
    			no_wrapper: true
    		});
    	}

    	render_timeline_item(c) {
    		var me = this;
    		this.prepare_timeline_item(c);
    		var $timeline_item = $(frappe.render_template("timeline_item", {data:c, frm:this.frm}))
    			.appendTo(me.list)
    			.on("click", ".delete-comment", function() {
    				var name = $timeline_item.data('name');
    				me.delete_comment(name);
    				return false;
    			})
    			.on('click', '.edit-comment', function(e) {
    				e.preventDefault();
    				var name = $timeline_item.data('name');

    				if($timeline_item.hasClass('is-editing')) {
    					me.current_editing_area.submit();
    				} else {
    					var $edit_btn = $(this);
    					var $timeline_content = $timeline_item.find('.timeline-item-content');
    					var $timeline_edit = $timeline_item.find('.timeline-item-edit');
    					var content = $timeline_content.html();

    					// update state
    					$edit_btn
    						.text(__("Save"))
    						.find('i')
    						.removeClass('octicon-pencil')
    						.addClass('octicon-check');
    					$timeline_content.hide();
    					$timeline_item.addClass('is-editing');

    					// initialize editing area
    					me.current_editing_area = me.make_editing_area($timeline_edit);
    					me.current_editing_area.set_value(content);

    					// submit handler
    					me.current_editing_area.on_submit = function (value) {
    						$timeline_edit.empty();
    						$timeline_content.show();

    						// set content to new val so that on save and refresh the new content is shown
    						c.content = value;
    						frappe.timeline.update_communication(c);
    						me.update_comment(name, value);
    						// all changes to the timeline_item for editing are reset after calling refresh
    						me.refresh();
    					};
    				}

    				return false;
    			});


    		if(c.communication_type=="Communication" && c.communication_medium==="Email") {
    			this.last_type = c.communication_medium;
    			this.add_reply_btn_event($timeline_item, c);
    		}

    	}

    	add_reply_btn_event($timeline_item, c) {
    		var me = this;
    		$timeline_item.find(".reply-link").on("click", function() {
    			var name = $(this).attr("data-name");
    			var last_email = null;

    			// find the email tor reply to
    			me.get_communications().forEach(function(c) {
    				if(c.name==name) {
    					last_email = c;
    					return false;
    				}
    			});

    			// make the composer
    			new frappe.views.CommunicationComposer({
    				doc: me.frm.doc,
    				txt: "",
    				title: __('Reply'),
    				frm: me.frm,
    				last_email: last_email,
    				is_a_reply: true
    			});
    		});
    	}

    	prepare_timeline_item(c) {
    		if(!c.sender) { c.sender = c.owner; }

    		if(c.sender && c.sender.indexOf("<")!==-1) {
    			c.sender = c.sender.split("<")[1].split(">")[0];
    		}

    		c.user_info = frappe.user_info(c.sender);

    		c["delete"] = "";
    		c["edit"] = "";
    		if(c.communication_type=="Comment" && (c.comment_type || "Comment") === "Comment") {
    			if(frappe.model.can_delete("Communication")) {
    				c["delete"] = '<a class="close delete-comment" title="Delete"  href="#"><i class="octicon octicon-x"></i></a>';
    			}

    			if(frappe.user.name == c.sender || (frappe.user.name == 'Administrator')) {
    				c["edit"] = '<a class="edit-comment text-muted" title="Edit" href="#">Edit</a>';
    			}
    		}
    		var communication_date = c.communication_date || c.creation;
    		c.comment_on_small = comment_when(communication_date, true);
    		c.comment_on = comment_when(communication_date);
    		c.futur_date = communication_date > frappe.datetime.now_datetime() ? true : false;
    		if(!c.fullname) {
    			c.fullname = c.sender_full_name || frappe.user.full_name(c.sender);
    		}

    		if(c.attachments && typeof c.attachments==="string")
    			{ c.attachments = JSON.parse(c.attachments); }

    		if(c.communication_type=="Comment" && !c.comment_type) {
    			c.comment_type = "Comment";
    		}

    		this.set_icon_and_color(c);

    		// label view
    		if(c.comment_type==="Workflow" || c.comment_type==="Label") {
    			c.comment_html = repl('<span class="label label-%(style)s">%(text)s</span>', {
    				style: frappe.utils.guess_style(c.content),
    				text: __(c.content)
    			});
    		} else {
    			if(c.communication_type=="Communication" && c.communication_medium=="Email") {
    				c.content = c.content.split(frappe.separator_element)[0];
    				c.content = frappe.utils.strip_original_content(c.content);

    				c.original_content = c.content;
    				c.content = frappe.utils.toggle_blockquote(c.content);
    			} else if (c.communication_type==="Feedback") {
    				c.content = frappe.utils.strip_original_content(c.content);

    				c.original_content = c.content;
    				c.content = frappe.utils.toggle_blockquote(c.content);
    			}
    			if(!frappe.utils.is_html(c.content)) {
    				c.content_html = frappe.markdown(__(c.content));
    			} else {
    				c.content_html = c.content;
    				c.content_html = frappe.utils.strip_whitespace(c.content_html);
    				c.content_html = c.content_html.replace(/&lt;/g,"<").replace(/&gt;/g,">");
    			}

    			// bold @mentions
    			if(c.comment_type==="Comment" &&
    				// avoid adding <b> tag a 2nd time
    				!c.content_html.match(/(^|\W)<b>(@[^\s]+)<\/b>/)
    			) {
    				/*
    					Replace the email ids by only displaying the string which
    					occurs before the second `@` to enhance the mentions.
    					Eg.
    					@abc@a-example.com will be converted to
    					@abc with the below line of code.
    				*/

    				c.content_html = c.content_html.replace(/(<[a][^>]*>)/g, "");
    				// bold the @mentions
    				c.content_html = c.content_html.replace(/(@[^\s@]*)@[^\s@|<]*/g, "<b>$1</b>");
    			}

    			if (this.is_communication_or_comment(c)) {
    				c.user_content = true;
    				if (!$.isArray(c._liked_by)) {
    					c._liked_by = JSON.parse(c._liked_by || "[]");
    				}

    				c.liked_by_user = c._liked_by.indexOf(frappe.session.user)!==-1;
    			}
    		}

    		// basic level of XSS protection
    		c.content_html = frappe.dom.remove_script_and_style(c.content_html);

    		// subject
    		c.show_subject = false;
    		if(c.subject && c.communication_type==="Communication") {
    			if(this.frm.doc.subject && !this.frm.doc.subject.includes(c.subject)) {
    				c.show_subject = true;
    			} else if(this.frm.meta.title_field && this.frm.doc[this.frm.meta.title_field]
    				&& !!this.frm.doc[this.frm.meta.title_field].includes(c.subject)) {
    				c.show_subject = true;
    			} else if(!this.frm.doc.name.includes(c.subject)) {
    				c.show_subject = true;
    			}
    		}
    	}

    	is_communication_or_comment(c) {
    		return c.communication_type==="Communication"
    		|| c.communication_type==="Feedback"
    		|| (c.communication_type==="Comment" && (c.comment_type==="Comment"||c.comment_type==="Relinked"));
    	}

    	set_icon_and_color(c) {
    		if(c.communication_type == "Feedback"){
    			c.icon = "octicon octicon-comment-discussion";
    			c.rating_icons = frappe.render_template("rating_icons", {rating: c.rating, show_label: true});
    			c.color = "#f39c12";
    		} else {
    			c.icon = {
    				"Email": "octicon octicon-mail",
    				"Chat": "octicon octicon-comment-discussion",
    				"Phone": "octicon octicon-device-mobile",
    				"SMS": "octicon octicon-comment",
    				"Event": "fa fa-calendar",
    				"Meeting": "octicon octicon-briefcase",
    				"ToDo": "fa fa-check",
    				"Created": "octicon octicon-plus",
    				"Submitted": "octicon octicon-lock",
    				"Cancelled": "octicon octicon-x",
    				"Assigned": "octicon octicon-person",
    				"Assignment Completed": "octicon octicon-check",
    				"Comment": "octicon octicon-comment-discussion",
    				"Workflow": "octicon octicon-git-branch",
    				"Label": "octicon octicon-tag",
    				"Attachment": "octicon octicon-cloud-upload",
    				"Attachment Removed": "octicon octicon-trashcan",
    				"Shared": "octicon octicon-eye",
    				"Unshared": "octicon octicon-circle-slash",
    				"Like": "octicon octicon-heart",
    				"Edit": "octicon octicon-pencil",
    				"Relinked": "octicon octicon-check",
    				"Reply": "octicon octicon-mail-reply"
    			}[c.comment_type || c.communication_medium];

    			c.color = {
    				"Email": "#3498db",
    				"Chat": "#3498db",
    				"Phone": "#3498db",
    				"SMS": "#3498db",
    				"Created": "#1abc9c",
    				"Submitted": "#1abc9c",
    				"Cancelled": "#c0392b",
    				"Assigned": "#f39c12",
    				"Assignment Completed": "#16a085",
    				"Comment": "#f39c12",
    				"Workflow": "#2c3e50",
    				"Label": "#2c3e50",
    				"Attachment": "#7f8c8d",
    				"Attachment Removed": "#eee",
    				"Relinked": "#16a085",
    				"Reply": "#8d99a6"
    			}[c.comment_type || c.communication_medium];

    			c.icon_fg = {
    				"Attachment Removed": "#333",
    			}[c.comment_type || c.communication_medium];

    		}
    		if(!c.icon_fg)
    			{ c.icon_fg = "#fff"; }
    	}

    	get_communications(with_versions) {
    		var docinfo = this.frm.get_docinfo(),
    			out = [].concat(docinfo.communications);
    		if(with_versions) {
    			this.build_version_comments(docinfo, out);
    		}

    		return out;
    	}

    	get_view_logs(){
    		var docinfo = this.frm.get_docinfo(),
    			out = [];
    		for(var i = 0, list = docinfo.views; i < list.length; i += 1){
    			var c = list[i];

    			c.content = "<a href=\"#Form/View Log/" + (c.name) + "\"> " + (__("viewed")) + "</a>";
    			c.comment_type = "Info";
    			out.push(c);
    		}		return out;
    	}

    	build_version_comments(docinfo, out) {
    		var me = this;
    		docinfo.versions.forEach(function(version) {
    			if(!version.data) { return; }
    			var data = JSON.parse(version.data);

    			// comment
    			if(data.comment) {
    				out.push(me.get_version_comment(version, data.comment, data.comment_type));
    				return;
    			}

    			// value changed in parent
    			if(data.changed && data.changed.length) {
    				var parts = [];
    				data.changed.every(function(p) {
    					if(p[0]==='docstatus') {
    						if(p[2]==1) {
    							out.push(me.get_version_comment(version, __('submitted this document')));
    						} else if (p[2]==2) {
    							out.push(me.get_version_comment(version, __('cancelled this document')));
    						}
    					} else {

    						var df = frappe.meta.get_docfield(me.frm.doctype, p[0], me.frm.docname);

    						if(df && !df.hidden) {
    							var field_display_status = frappe.perm.get_field_display_status(df, null,
    								me.frm.perm);
    							if(field_display_status === 'Read' || field_display_status === 'Write') {
    								parts.push(__('{0} from {1} to {2}', [
    									__(df.label),
    									(frappe.ellipsis(p[1], 40) || '""').bold(),
    									(frappe.ellipsis(p[2], 40) || '""').bold()
    								]));
    							}
    						}
    					}
    					return parts.length < 3;
    				});
    				if(parts.length) {
    					out.push(me.get_version_comment(version, __("changed value of {0}", [parts.join(', ')])));
    				}
    			}

    			// value changed in table field
    			if(data.row_changed && data.row_changed.length) {
    				var parts = [];
    				data.row_changed.every(function(row) {
    					row[3].every(function(p) {
    						var df = me.frm.fields_dict[row[0]] &&
    							frappe.meta.get_docfield(me.frm.fields_dict[row[0]].grid.doctype,
    								p[0], me.frm.docname);

    						if(df && !df.hidden) {
    							var field_display_status = frappe.perm.get_field_display_status(df,
    								null, me.frm.perm);

    							if(field_display_status === 'Read' || field_display_status === 'Write') {
    								parts.push(__('{0} from {1} to {2} in row #{3}', [
    									frappe.meta.get_label(me.frm.fields_dict[row[0]].grid.doctype,
    										p[0]),
    									(frappe.ellipsis(p[1], 40) || '""').bold(),
    									(frappe.ellipsis(p[2], 40) || '""').bold(),
    									row[1]
    								]));
    							}
    						}
    						return parts.length < 3;
    					});
    					return parts.length < 3;
    				});
    				if(parts.length) {
    					out.push(me.get_version_comment(version, __("changed values for {0}",
    						[parts.join(', ')])));
    				}
    			}

    			// rows added / removed
    			// __('added'), __('removed') # for translation, don't remove
    			['added', 'removed'].forEach(function(key) {
    				if(data[key] && data[key].length) {
    					parts = (data[key] || []).map(function(p) {
    						var df = frappe.meta.get_docfield(me.frm.doctype, p[0], me.frm.docname);
    						if(df && !df.hidden) {
    							var field_display_status = frappe.perm.get_field_display_status(df, null,
    								me.frm.perm);

    							if(field_display_status === 'Read' || field_display_status === 'Write') {
    								return frappe.meta.get_label(me.frm.doctype, p[0])
    							}
    						}
    					});
    					parts = parts.filter(function(p) { return p; });
    					if(parts.length) {
    						out.push(me.get_version_comment(version, __("{0} rows for {1}",
    							[__(key), parts.join(', ')])));
    					}
    				}
    			});
    		});
    	}

    	get_version_comment(version, text, comment_type) {
    		if(!comment_type) {
    			text = '<a href="#Form/Version/'+version.name+'">' + text + '</a>';
    		}
    		return {
    			comment_type: comment_type || 'Edit',
    			creation: version.creation,
    			owner: version.owner,
    			version_name: version.name,
    			sender: version.owner,
    			comment_by: version.owner,
    			content: text
    		};
    	}

    	insert_comment(comment_type, comment, btn) {
    		var me = this;
    		return frappe.call({
    			method: "frappe.desk.form.utils.add_comment",
    			args: {
    				doc:{
    					doctype: "Communication",
    					communication_type: "Comment",
    					comment_type: comment_type || "Comment",
    					reference_doctype: this.frm.doctype,
    					reference_name: this.frm.docname,
    					content: comment,
    					sender: frappe.session.user
    				}
    			},
    			btn: btn,
    			callback: function(r) {
    				if(!r.exc) {
    					me.comment_area.set_value('');
    					frappe.utils.play_sound("click");

    					var comment = r.message;
    					var comments = me.get_communications();
    					var comment_exists = false;
    					for (var i=0, l=comments.length; i<l; i++) {
    						if (comments[i].name==comment.name) {
    							comment_exists = true;
    							break;
    						}
    					}
    					if (comment_exists) {
    						return;
    					}

    					me.frm.get_docinfo().communications = comments.concat([r.message]);
    					me.refresh(true);
    				}
    			}
    		});

    	}

    	delete_comment(name) {
    		var me = this;

    		frappe.confirm(__('Delete comment?'), function() {
    			return frappe.call({
    				method: "frappe.client.delete",
    				args: {
    					doctype: "Communication",
    					name: name
    				},
    				callback: function(r) {
    					if(!r.exc) {
    						frappe.utils.play_sound("delete");

    						me.frm.get_docinfo().communications =
    							$.map(me.frm.get_docinfo().communications,
    								function(v) {
    									if(v.name==name) { return null; }
    									else { return v; }
    								}
    							);
    						me.refresh(true);
    					}
    				}
    			});
    		});
    	}

    	/**
    	 * Update comment
    	 *
    	 * @param {string} name
    	 * @param {string} content
    	 *
    	 * @returns {boolean}
    	 */
    	update_comment(name, content){
    		return frappe.call({
    			method: 'frappe.desk.form.utils.update_comment',
    			args: { name: name, content: content },
    			callback: function(r) {
    				if(!r.exc) {
    					frappe.utils.play_sound('click');
    				}
    			}
    		});
    	}

    	get_recipient() {
    		if (this.frm.email_field) {
    			return this.frm.doc[this.frm.email_field];
    		} else {
    			return this.frm.doc.email_id || this.frm.doc.email || "";
    		}
    	}

    	get_last_email(from_recipient) {
    		var last_email = null,
    			communications = this.frm.get_docinfo().communications,
    			email = this.get_recipient();

    		$.each(communications && communications.sort(function(a, b) { return a.creation > b.creation ? -1 : 1 }), function(i, c) {
    			if(c.communication_type=='Communication' && c.communication_medium=="Email") {
    				if(from_recipient) {
    					if(c.sender.indexOf(email)!==-1) {
    						last_email = c;
    						return false;
    					}
    				} else {
    					last_email = c;
    					return false;
    				}
    			}
    		});

    		return last_email;
    	}

    	get_names_for_mentions() {
    		var valid_users = Object.keys(frappe.boot.user_info)
    			.filter(function (user) { return !["Administrator", "Guest"].includes(user); });

    		return valid_users.map(function (user) { return frappe.boot.user_info[user].name; });
    	}

    	setup_comment_like() {
    		this.wrapper.on("click", ".comment-likes .octicon-heart", frappe.ui.click_toggle_like);

    		frappe.ui.setup_like_popover(this.wrapper, ".comment-likes");
    	}
    };

    $.extend(frappe.timeline, {
    	new_communication: function(communication) {
    		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
    		if (docinfo && docinfo.communications) {
    			var communications = docinfo.communications;
    			var communication_exists = false;
    			for (var i=0, l=communications.length; i<l; i++) {
    				if (communications[i].name==communication.name) {
    					communication_exists = true;
    					break;
    				}
    			}

    			if (!communication_exists) {
    				docinfo.communications = communications.concat([communication]);
    			}
    		}

    		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
    			cur_frm.timeline && cur_frm.timeline.refresh();
    		}
    	},

    	delete_communication: function(communication) {
    		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
    		var index = frappe.timeline.index_of_communication(communication, docinfo);
    		if (index !== -1) {
    			// remove it from communications list
    			docinfo.communications.splice(index, 1);
    		}

    		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
    			cur_frm.timeline && cur_frm.timeline.refresh();
    		}
    	},

    	update_communication: function(communication) {
    		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
    		var index = frappe.timeline.index_of_communication(communication, docinfo);

    		if (index !== -1) {
    			// update
    			$.extend(docinfo.communications[index], communication);
    		}

    		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
    			cur_frm.timeline && cur_frm.timeline.refresh();
    		}
    	},

    	index_of_communication: function(communication, docinfo) {
    		var index = -1;

    		if (docinfo && docinfo.communications) {
    			var communications = docinfo.communications;

    			for (var i=0, l=communications.length; i<l; i++) {
    				if (communications[i].name==communication.name) {
    					index = i;
    					break;
    				}
    			}
    		}

    		return index;
    	}
    });

    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
    // MIT License. See license.txt

    frappe.provide("frappe.ui.form");

    frappe.ui.form.AssignTo = Class.extend({
    	init: function(opts) {
    		var me = this;

    		$.extend(this, opts);
    		this.btn = this.parent.find(".add-assignment").on("click", function() { me.add(); });
    		this.btn_wrapper = this.btn.parent();

    		this.refresh();
    	},
    	refresh: function() {
    		if(this.frm.doc.__islocal) {
    			this.parent.toggle(false);
    			return;
    		}
    		this.parent.toggle(true);
    		this.render(this.frm.get_docinfo().assignments);
    	},
    	render: function(d) {
    		var this$1 = this;

    		var me = this;
    		this.frm.get_docinfo().assignments = d;
    		this.parent.find(".assignment-row").remove();

    		if(me.primary_action) {
    			me.primary_action.remove();
    			me.primary_action = null;
    		}

    		if(this.dialog) {
    			this.dialog.hide();
    		}

    		if(d && d.length) {
    			for(var i=0; i<d.length; i++) {
    				var info = frappe.user_info(d[i].owner);
    				info.assign_to_name = d[i].name;
    				info.owner = d[i].owner;
    				info.avatar = frappe.avatar(d[i].owner);
    				info.description = d[i].description || "";

    				info._fullname = info.fullname;
    				if(info.fullname.length > 10) {
    					info._fullname = info.fullname.substr(0, 10) + '...';
    				}

    				$(repl('<li class="assignment-row">\
					<a class="close" data-owner="%(owner)s">&times;</a>\
					%(avatar)s\
					<span><a href="#Form/ToDo/%(assign_to_name)s">%(_fullname)s</a></span>\
				</li>', info))
    					.insertBefore(this$1.parent.find('.add-assignment'));

    				if(d[i].owner===frappe.session.user) {
    					me.primary_action = this$1.frm.page.add_menu_item(__("Assignment Complete"), function() {
    						me.remove(frappe.session.user);
    					}, "fa fa-check", "btn-success");
    				}

    				if(!(d[i].owner === frappe.session.user || me.frm.perm[0].write)) {
    					me.parent.find('a.close').remove();
    				}
    			}

    			// set remove
    			this.parent.find('a.close').click(function() {
    				me.remove($(this).attr('data-owner'));
    				return false;
    			});

    			//this.btn_wrapper.addClass("hide");
    		}
    	},
    	add: function() {
    		var me = this;

    		if(this.frm.is_new()) {
    			frappe.throw(__("Please save the document before assignment"));
    			return;
    		}

    		if(!me.assign_to) {
    			me.assign_to = new frappe.ui.form.AssignToDialog({
    				obj: me,
    				method: 'frappe.desk.form.assign_to.add',
    				doctype: me.frm.doctype,
    				docname: me.frm.docname,
    				callback: function(r) {
    					me.render(r.message);
    				}
    			});
    		}
    		me.assign_to.dialog.clear();

    		if(me.frm.meta.title_field) {
    			me.assign_to.dialog.set_value("description", me.frm.doc[me.frm.meta.title_field]);
    		}

    		me.assign_to.dialog.show();
    		me.assign_to = null;
    	},
    	remove: function(owner) {
    		var me = this;

    		if(this.frm.is_new()) {
    			frappe.throw(__("Please save the document before removing assignment"));
    			return;
    		}

    		frappe.call({
    			method:'frappe.desk.form.assign_to.remove',
    			args: {
    				doctype: me.frm.doctype,
    				name: me.frm.docname,
    				assign_to: owner
    			},
    			callback:function(r,rt) {
    				me.render(r.message);
    			}
    		});
    	}
    });


    frappe.ui.form.AssignToDialog = Class.extend({
    	init: function(opts){
    		var me = this;
    		var dialog = new frappe.ui.Dialog({
    			title: __('Add to To Do'),
    			fields: [
    				{fieldtype: 'Link', fieldname:'assign_to', options:'User',
    					label:__("Assign To"), reqd:true, filters: {'user_type': 'System User'}},
    				{fieldtype:'Check', fieldname:'myself', label:__("Assign to me"), "default":0},
    				{fieldtype:'Small Text', fieldname:'description', label:__("Comment")},
    				{fieldtype: 'Section Break'},
    				{fieldtype: 'Column Break'},
    				{fieldtype:'Date', fieldname:'date', label: __("Complete By")},
    				{fieldtype:'Check', fieldname:'notify',
    					label:__("Notify by Email")},
    				{fieldtype: 'Column Break'},
    				{fieldtype:'Select', fieldname:'priority', label: __("Priority"),
    					options:[
    						{value:'Low', label:__('Low')},
    						{value:'Medium', label:__('Medium')},
    						{value:'High', label:__('High')}],
    					'default':'Medium'} ],
    			primary_action: function() { frappe.ui.add_assignment(opts, this); },
    			primary_action_label: __("Add")
    		});
    		$.extend(me, dialog);

    		me.dialog = dialog;

    		me.dialog.fields_dict.assign_to.get_query = "frappe.core.doctype.user.user.user_query";

    		var myself = me.dialog.get_input("myself").on("click", function() {
    			me.toggle_myself(this);
    		});
    		me.toggle_myself(myself);
    	},
    	toggle_myself: function(myself) {
    		var me = this;
    		if($(myself).prop("checked")) {
    			me.dialog.set_value("assign_to", frappe.session.user);
    			me.dialog.set_value("notify", 0);
    			me.dialog.get_field("notify").$wrapper.toggle(false);
    			me.dialog.get_field("assign_to").$wrapper.toggle(false);
    		} else {
    			me.dialog.set_value("assign_to", "");
    			me.dialog.get_field("notify").$wrapper.toggle(true);
    			me.dialog.get_field("assign_to").$wrapper.toggle(true);
    		}
    	},

    });

    frappe.ui.add_assignment = function(opts, dialog) {
    	var assign_to = dialog.fields_dict.assign_to.get_value();
    	var args = dialog.get_values();
    	if(args && assign_to) {
    		return frappe.call({
    			method: opts.method,
    			args: $.extend(args, {
    				doctype: opts.doctype,
    				name: opts.docname,
    				assign_to: assign_to,
    				bulk_assign:  opts.bulk_assign || false,
    				re_assign: opts.re_assign || false
    			}),
    			callback: function(r,rt) {
    				if(!r.exc) {
    					if(opts.callback){
    						opts.callback(r);
    					}
    					dialog && dialog.hide();
    				}
    			},
    			btn: this
    		});
    	}
    };

    frappe.provide('frappe.ui.form');

    frappe.ui.form.make_quick_entry = function (doctype, after_insert, init_callback, doc) {
    	var trimmed_doctype = doctype.replace(/ /g, '');
    	var controller_name = "QuickEntryForm";

    	if(frappe.ui.form[trimmed_doctype + "QuickEntryForm"]){
    		controller_name = trimmed_doctype + "QuickEntryForm";
    	}

    	frappe.quick_entry = new frappe.ui.form[controller_name](doctype, after_insert, init_callback, doc);
    	return frappe.quick_entry.setup();
    };

    frappe.ui.form.QuickEntryForm = Class.extend({
    	init: function(doctype, after_insert, init_callback, doc) {
    		this.doctype = doctype;
    		this.after_insert = after_insert;
    		this.init_callback = init_callback;
    		this.doc = doc;
    	},

    	setup: function() {
    		var this$1 = this;

    		var me = this;
    		return new Promise(function (resolve) {
    			frappe.model.with_doctype(this$1.doctype, function() {
    				me.set_meta_and_mandatory_fields();
    				if(me.is_quick_entry()) {
    					me.render_dialog();
    					resolve(me);
    				} else {
    					frappe.quick_entry = null;
    					frappe.set_route('Form', me.doctype, me.doc.name)
    						.then(function () { return resolve(me); });
    				}
    			});
    		});
    	},

    	set_meta_and_mandatory_fields: function(){
    		var fields = frappe.get_meta(this.doctype).fields;
    		if (fields.length < 7) {
    			// if less than 7 fields, then show everything
    			this.mandatory = fields;
    		} else {
    			// prepare a list of mandatory and bold fields
    			this.mandatory = $.map(fields,
    				function(d) { return ((d.reqd || d.bold || d.allow_in_quick_entry) && !d.read_only) ? $.extend({}, d) : null; });
    		}
    		this.meta = frappe.get_meta(this.doctype);
    		if (!this.doc) {
    			this.doc = frappe.model.get_new_doc(this.doctype, null, null, true);
    		}
    	},

    	is_quick_entry: function(){
    		if(this.meta.quick_entry != 1) {
    			return false;
    		}

    		this.validate_for_prompt_autoname();

    		if (this.has_child_table()
    			|| !this.mandatory.length) {
    			return false;
    		}

    		return true;
    	},

    	too_many_mandatory_fields: function(){
    		if(this.mandatory.length > 7) {
    			// too many fields, show form
    			return true;
    		}
    		return false;
    	},

    	has_child_table: function(){
    		if($.map(this.mandatory, function(d) {
    			return d.fieldtype==='Table' ? d : null; }).length) {
    			// has mandatory table, quit!
    			return true;
    		}
    		return false;
    	},

    	validate_for_prompt_autoname: function(){
    		if(this.meta.autoname && this.meta.autoname.toLowerCase()==='prompt') {
    			this.mandatory = [{fieldname:'__newname', label:__('{0} Name', [this.meta.name]),
    				reqd: 1, fieldtype:'Data'}].concat(this.mandatory);
    		}
    	},

    	render_dialog: function(){
    		var me = this;
    		this.dialog = new frappe.ui.Dialog({
    			title: __("New {0}", [__(this.doctype)]),
    			fields: this.mandatory,
    		});
    		this.dialog.doc = this.doc;

    		this.register_primary_action();
    		this.render_edit_in_full_page_link();
    		// ctrl+enter to save
    		this.dialog.wrapper.keydown(function(e) {
    			if((e.ctrlKey || e.metaKey) && e.which==13) {
    				if(!frappe.request.ajax_count) {
    					// not already working -- double entry
    					me.dialog.get_primary_btn().trigger("click");
    					e.preventDefault();
    					return false;
    				}
    			}
    		});

    		this.dialog.onhide = function () { return frappe.quick_entry = null; };
    		this.dialog.show();
    		this.dialog.$wrapper.on('shown.bs.modal', function() {
    			$(document).trigger('quick-entry-dialog-open');
    		});

    		this.dialog.refresh_dependency();
    		this.set_defaults();

    		if (this.init_callback) {
    			this.init_callback(this.dialog);
    		}
    	},

    	register_primary_action: function(){
    		var me = this;
    		this.dialog.set_primary_action(__('Save'), function() {
    			if(me.dialog.working) {
    				return;
    			}
    			var data = me.dialog.get_values();

    			if(data) {
    				me.dialog.working = true;
    				me.dialog.set_message(__('Saving...'));
    				me.insert().then(function () {
    					me.dialog.clear_message();
    				});
    			}
    		});
    	},

    	insert: function() {
    		var me = this;
    		return new Promise(function (resolve) {
    			me.update_doc();
    			frappe.call({
    				method: "frappe.client.insert",
    				args: {
    					doc: me.dialog.doc
    				},
    				callback: function(r) {
    					me.dialog.hide();
    					// delete the old doc
    					frappe.model.clear_doc(me.dialog.doc.doctype, me.dialog.doc.name);
    					me.dialog.doc = r.message;
    					if(frappe._from_link) {
    						frappe.ui.form.update_calling_link(me.dialog.doc);
    					} else {
    						if(me.after_insert) {
    							me.after_insert(me.dialog.doc);
    						} else {
    							me.open_form_if_not_list();
    						}
    					}
    				},
    				error: function() {
    					me.open_doc();
    				},
    				always: function() {
    					me.dialog.working = false;
    					resolve(me.dialog.doc);
    				},
    				freeze: true
    			});
    		});
    	},

    	open_form_if_not_list: function() {
    		var route = frappe.get_route();
    		var doc = this.dialog.doc;
    		if (route && !(route[0]==='List' && route[1]===doc.doctype)) {
    			frappe.run_serially([
    				function () { return frappe.set_route('Form', doc.doctype, doc.name); }
    			]);
    		}
    	},

    	update_doc: function(){
    		var me = this;
    		var data = this.dialog.get_values(true);
    		$.each(data, function(key, value) {
    			if(key==='__newname') {
    				me.dialog.doc.name = value;
    			}
    			else {
    				if(!is_null(value)) {
    					me.dialog.doc[key] = value;
    				}
    			}
    		});
    		return this.dialog.doc;
    	},

    	open_doc: function(){
    		this.dialog.hide();
    		this.update_doc();
    		frappe.set_route('Form', this.doctype, this.doc.name);
    	},

    	render_edit_in_full_page_link: function(){
    		var me = this;
    		var $link = $('<div style="padding-left: 7px; padding-top: 30px; padding-bottom: 10px;">' +
    			'<button class="edit-full btn-default btn-sm">' + __("Edit in full page") + '</button></div>').appendTo(this.dialog.body);

    		$link.find('.edit-full').on('click', function() {
    			// edit in form
    			me.open_doc();
    		});
    	},

    	set_defaults: function(){
    		var me = this;
    		// set defaults
    		$.each(this.dialog.fields_dict, function(fieldname, field) {
    			field.doctype = me.doc.doctype;
    			field.docname = me.doc.name;

    			if(!is_null(me.doc[fieldname])) {
    				field.set_input(me.doc[fieldname]);
    			}
    		});
    	}
    });

    frappe.provide('frappe.ui.form');
    frappe.provide('frappe.success_action');

    frappe.ui.form.SuccessAction = class SuccessAction {
    	constructor(form) {
    		this.form = form;
    		this.load_setting();
    	}

    	load_setting() {
    		var this$1 = this;

    		this.setting = frappe.boot.success_action
    			.find(function (setting) { return setting.ref_doctype === this$1.form.doctype; });
    	}

    	show() {
    		if (!this.setting) { return; }
    		if (this.form.doc.docstatus === 0 && !this.form.is_first_creation()) { return; }

    		this.prepare_dom();
    		this.show_alert();
    	}

    	prepare_dom() {
    		this.container = $(document.body).find('.success-container');
    		if (!this.container.length) {
    			this.container = $('<div class="success-container">').appendTo(document.body);
    		}
    	}

    	show_alert() {
    		var this$1 = this;

    		frappe.db.count(this.form.doctype)
    			.then(function (count) {
    				var setting = this$1.setting;
    				var message = count === 1 ?
    					setting.first_success_message :
    					setting.message;

    				var $buttons = this$1.get_actions().map(function (action) {
    					var $btn = $(("<button class=\"next-action\"><span>" + (action.label) + "</span></button>"));
    					$btn.click(function () { return action.action(this$1.form); });
    					return $btn;
    				});

    				var next_action_container = $("<div class=\"next-action-container\"></div>");
    				next_action_container.append($buttons);
    				var html = next_action_container;

    				frappe.show_alert({
    					message: message,
    					body: html,
    					indicator: 'green',
    				}, setting.action_timeout);
    			});
    	}

    	get_actions() {
    		var this$1 = this;

    		var actions = [];
    		var checked_actions = this.setting.next_actions.split("\n");
    		checked_actions
    			.forEach(function (action) {
    				if (typeof action === 'string' && this$1.default_actions[action]) {
    					actions.push(this$1.default_actions[action]);
    				} else if (typeof action === 'object') {
    					actions.push(action);
    				}
    			});

    		return actions;
    	}

    	get default_actions() {
    		return {
    			'new': {
    				label: __('New'),
    				action: function (frm) { return frappe.new_doc(frm.doctype); }
    			},
    			'print': {
    				label: __('Print'),
    				action: function (frm) { return frm.print_doc(); }
    			},
    			'email': {
    				label: __('Email'),
    				action: function (frm) { return frm.email_doc(); }
    			},
    			'list': {
    				label: __('View All'),
    				action: function (frm) {
    					frappe.set_route('List', frm.doctype);
    				}
    			}
    		};
    	}
    };

}());
//# sourceMappingURL=form.min.js.map
